[{"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\reportWebVitals.ts":"1","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\index.tsx":"2","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\index.tsx":"3","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Home\\index.tsx":"4","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\graphql\\generated\\index.tsx":"5","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Register\\index.tsx":"6","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InputField\\index.tsx":"7","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\toErrorMap.ts":"8","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Login\\index.tsx":"9","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\CreateTeam\\index.tsx":"10","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\authentication.ts":"11","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\ProtectedRoute\\index.tsx":"12","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\Navbar\\index.tsx":"13","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FullPage\\index.tsx":"14","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\index.tsx":"15","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\index.tsx":"16","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Input\\index.tsx":"17","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\AppLayout\\index.tsx":"18","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\index.tsx":"19","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\index.tsx":"20","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\index.tsx":"21","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ChannelItem\\index.tsx":"22","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\UserItem\\index.tsx":"23","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ListItem\\index.tsx":"24","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\TeamItem\\index.tsx":"25","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Header\\index.tsx":"26","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\Sidebar\\index.tsx":"27","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\AddChannelModal\\index.tsx":"28","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InvitePoepleModal\\index.tsx":"29","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\index.ts":"30","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\ChatInput\\index.tsx":"31","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\accessToken.ts":"32","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\index.ts":"33","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\index.ts":"34","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\index.ts":"35","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\DirectMessageModal\\index.tsx":"36","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\session.ts":"37","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\index.ts":"38","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FileUpload\\index.tsx":"39","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\Message\\index.tsx":"40","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\index.ts":"41","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\index.ts":"42","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\CircleIconButton\\index.tsx":"43","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\MessageItem\\index.tsx":"44","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\NewMessages\\index.tsx":"45","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\SessionContext.tsx":"46","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\getBase64Value.ts":"47","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\PublicRoute\\index.tsx":"48"},{"size":431,"mtime":1608898048476,"results":"49","hashOfConfig":"50"},{"size":2227,"mtime":1610459273717,"results":"51","hashOfConfig":"50"},{"size":11214,"mtime":1610794105729,"results":"52","hashOfConfig":"50"},{"size":264,"mtime":1610640147966,"results":"53","hashOfConfig":"50"},{"size":46990,"mtime":1610797297870,"results":"54","hashOfConfig":"50"},{"size":2948,"mtime":1609172166922,"results":"55","hashOfConfig":"50"},{"size":958,"mtime":1608913265686,"results":"56","hashOfConfig":"50"},{"size":292,"mtime":1608904492685,"results":"57","hashOfConfig":"50"},{"size":3942,"mtime":1610458582610,"results":"58","hashOfConfig":"50"},{"size":3696,"mtime":1610640387730,"results":"59","hashOfConfig":"50"},{"size":240,"mtime":1608920765385,"results":"60","hashOfConfig":"50"},{"size":2185,"mtime":1608993552852,"results":"61","hashOfConfig":"50"},{"size":1519,"mtime":1609001573752,"results":"62","hashOfConfig":"50"},{"size":419,"mtime":1608995388503,"results":"63","hashOfConfig":"50"},{"size":4605,"mtime":1610794646449,"results":"64","hashOfConfig":"50"},{"size":2945,"mtime":1610796207740,"results":"65","hashOfConfig":"50"},{"size":180,"mtime":1609002125260,"results":"66","hashOfConfig":"50"},{"size":330,"mtime":1609090979782,"results":"67","hashOfConfig":"50"},{"size":1906,"mtime":1610371660977,"results":"68","hashOfConfig":"50"},{"size":5380,"mtime":1610638762601,"results":"69","hashOfConfig":"50"},{"size":1759,"mtime":1610794681703,"results":"70","hashOfConfig":"50"},{"size":1263,"mtime":1609979706001,"results":"71","hashOfConfig":"50"},{"size":1550,"mtime":1610375299148,"results":"72","hashOfConfig":"50"},{"size":407,"mtime":1609023936752,"results":"73","hashOfConfig":"50"},{"size":1929,"mtime":1610033845878,"results":"74","hashOfConfig":"50"},{"size":535,"mtime":1609980536001,"results":"75","hashOfConfig":"50"},{"size":3291,"mtime":1610371781414,"results":"76","hashOfConfig":"50"},{"size":10906,"mtime":1610371680694,"results":"77","hashOfConfig":"50"},{"size":2695,"mtime":1610371717759,"results":"78","hashOfConfig":"50"},{"size":61,"mtime":1609003529763,"results":"79","hashOfConfig":"50"},{"size":4641,"mtime":1610797885794,"results":"80","hashOfConfig":"50"},{"size":199,"mtime":1608898580850,"results":"81","hashOfConfig":"50"},{"size":268,"mtime":1610031675367,"results":"82","hashOfConfig":"50"},{"size":29,"mtime":1609004646311,"results":"83","hashOfConfig":"50"},{"size":28,"mtime":1609010816707,"results":"84","hashOfConfig":"50"},{"size":8558,"mtime":1610640384945,"results":"85","hashOfConfig":"50"},{"size":149,"mtime":1608925472611,"results":"86","hashOfConfig":"50"},{"size":30,"mtime":1609170976229,"results":"87","hashOfConfig":"50"},{"size":1272,"mtime":1610286624132,"results":"88","hashOfConfig":"50"},{"size":795,"mtime":1610296591166,"results":"89","hashOfConfig":"50"},{"size":198,"mtime":1610030900875,"results":"90","hashOfConfig":"50"},{"size":92,"mtime":1610131128383,"results":"91","hashOfConfig":"50"},{"size":947,"mtime":1610033489615,"results":"92","hashOfConfig":"50"},{"size":2119,"mtime":1610798306121,"results":"93","hashOfConfig":"50"},{"size":2110,"mtime":1610796612828,"results":"94","hashOfConfig":"50"},{"size":783,"mtime":1608925505942,"results":"95","hashOfConfig":"50"},{"size":254,"mtime":1610283744254,"results":"96","hashOfConfig":"50"},{"size":777,"mtime":1610459196685,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1xrzby7",{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"129"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\reportWebVitals.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\index.tsx",["223","224"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Home\\index.tsx",["225"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\graphql\\generated\\index.tsx",["226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Register\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InputField\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\toErrorMap.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Login\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\CreateTeam\\index.tsx",["253"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\authentication.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\ProtectedRoute\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\Navbar\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FullPage\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\index.tsx",["254","255","256","257","258"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Input\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\AppLayout\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\index.tsx",["259","260"],"import {\r\n  Box,\r\n  List,\r\n  MenuButton,\r\n  MenuItem,\r\n  MenuList,\r\n  Text,\r\n  Menu,\r\n} from '@chakra-ui/react';\r\nimport React, { FC, useEffect } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useHistory } from 'react-router';\r\nimport { CircleIconButton } from '../../../../Components';\r\nimport { useSessionContext } from '../../../../context/SessionContext';\r\nimport {\r\n  NewUserStatusDocument,\r\n  RegularChannelFragment,\r\n  RegularTeamFragment,\r\n  useLogoutMutation,\r\n  useMeQuery,\r\n  useUserStatusesQuery,\r\n} from '../../../../graphql/generated';\r\nimport { setAccessToken } from '../../../../utils/accessToken';\r\nimport { ChannelItem, UserItem } from './components';\r\nimport { ListItem } from './components/ListItem';\r\n\r\ninterface Props {\r\n  teamName: string | undefined;\r\n  username: string;\r\n  channels: (RegularChannelFragment | null | undefined)[] | null | undefined;\r\n  dmChannels: RegularChannelFragment[] | null | undefined;\r\n\r\n  setSelectedChannel: (selectedChannel: RegularChannelFragment) => void;\r\n  selectedChannel: RegularChannelFragment | null | undefined;\r\n  onOpen: () => void;\r\n  onInviteOpen: () => void;\r\n  onDirectMessageOpen: () => void;\r\n  selectedTeam: RegularTeamFragment;\r\n  currentUserName: string;\r\n}\r\n\r\nexport const Channels: FC<Props> = ({\r\n  teamName,\r\n  username,\r\n  channels,\r\n  dmChannels,\r\n  setSelectedChannel,\r\n  selectedChannel,\r\n  onOpen,\r\n  onInviteOpen,\r\n  onDirectMessageOpen,\r\n  selectedTeam,\r\n  currentUserName,\r\n}) => {\r\n  const [logout, { client }] = useLogoutMutation();\r\n  const { data, loading, subscribeToMore } = useUserStatusesQuery({\r\n    variables: { teamId: selectedTeam.id },\r\n    fetchPolicy: 'network-only',\r\n  });\r\n  const history = useHistory();\r\n  const [sessionContext, updateSessionContext] = useSessionContext();\r\n\r\n  const { loading: meLoading, data: meData } = useMeQuery();\r\n\r\n  useEffect(() => {\r\n    return subscribeToMore({\r\n      document: NewUserStatusDocument,\r\n      variables: { teamId: selectedTeam.id },\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        return Object.assign({}, prev, {\r\n          userStatuses: [subscriptionData.data],\r\n        });\r\n      },\r\n    });\r\n  }, [selectedTeam.id]);\r\n\r\n  const handleLogout = async () => {\r\n    await logout();\r\n    await client.cache.reset();\r\n    setAccessToken('');\r\n    updateSessionContext({\r\n      ...sessionContext,\r\n      isAuthenticated: false,\r\n    });\r\n    window.location.href = '/login';\r\n  };\r\n\r\n  if (meLoading || !meData) return null;\r\n  return (\r\n    <Box background=\"blue.800\" color=\"#afc4d2\">\r\n      <Box ml={4} mt={2}>\r\n        <Menu>\r\n          <MenuButton as={Text} color=\"white\" cursor=\"pointer\">\r\n            {username}\r\n          </MenuButton>\r\n          <MenuList minWidth={100} p={0}>\r\n            <MenuItem onClick={handleLogout}>\r\n              <Text color=\"blue.500\">Sign out</Text>\r\n            </MenuItem>\r\n          </MenuList>\r\n        </Menu>\r\n      </Box>\r\n\r\n      <Text ml={4}>Team {teamName}</Text>\r\n\r\n      <Box\r\n        mb={1}\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        ml={4}\r\n        mt={2}\r\n        color=\"white\"\r\n      >\r\n        <div>Channels</div>\r\n        {selectedTeam?.admin && (\r\n          <CircleIconButton\r\n            label=\"Add new channel\"\r\n            onClick={onOpen}\r\n            ml={2}\r\n            size=\"small\"\r\n            icon={MdAdd}\r\n          />\r\n        )}\r\n      </Box>\r\n\r\n      <List>\r\n        {channels &&\r\n          channels.map((channel) =>\r\n            !channel ? null : (\r\n              <ChannelItem\r\n                key={channel.id}\r\n                channel={channel}\r\n                pl={4}\r\n                selectedChannel={selectedChannel}\r\n                setSelectedChannel={setSelectedChannel}\r\n                selectedTeamId={selectedTeam?.id}\r\n              />\r\n            )\r\n          )}\r\n      </List>\r\n      <Box\r\n        mb={1}\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        ml={4}\r\n        mt={2}\r\n        color=\"white\"\r\n      >\r\n        <div>Direct Messages</div>\r\n        <CircleIconButton\r\n          label=\"Start direct messaging\"\r\n          onClick={onDirectMessageOpen}\r\n          ml={2}\r\n          size=\"small\"\r\n          icon={MdAdd}\r\n        />\r\n      </Box>\r\n      <List>\r\n        {dmChannels &&\r\n          selectedTeam?.id &&\r\n          dmChannels.map((channel) => (\r\n            <UserItem\r\n              key={channel.id}\r\n              channel={channel}\r\n              selectedChannel={selectedChannel}\r\n              setSelectedChannel={setSelectedChannel}\r\n              selectedTeamId={selectedTeam.id}\r\n              pl={4}\r\n              currentUserName={currentUserName}\r\n              isOnline={data?.userStatuses.some((userStatus) => {\r\n                return (\r\n                  userStatus.online &&\r\n                  userStatus.username ===\r\n                    channel.name\r\n                      .split(', ')\r\n                      .filter((username) => username !== currentUserName)[0]\r\n                );\r\n              })}\r\n            />\r\n          ))}\r\n      </List>\r\n      {selectedTeam?.admin && (\r\n        <ListItem pl={4} mt={4} onClick={onInviteOpen}>\r\n          <Text as=\"span\" fontWeight=\"bold\" mr={4}>\r\n            +\r\n          </Text>\r\n          Invite People\r\n        </ListItem>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\index.tsx",["261"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ChannelItem\\index.tsx",["262","263"],"import { BoxProps, Text } from '@chakra-ui/react';\r\nimport React, { FC } from 'react';\r\nimport { useHistory, useRouteMatch } from 'react-router';\r\nimport {\r\n  RegularChannelFragment,\r\n  RegularUserFragment,\r\n} from '../../../../../../graphql/generated';\r\nimport { ListItem } from '../ListItem';\r\n\r\ninterface Props {\r\n  channel: RegularChannelFragment;\r\n  pl?: BoxProps['pl'];\r\n  setSelectedChannel: (selectedChannel: RegularChannelFragment) => void;\r\n  selectedChannel: RegularChannelFragment | null | undefined;\r\n  selectedTeamId: string | undefined;\r\n}\r\n\r\nexport const ChannelItem: FC<Props> = ({\r\n  channel,\r\n  pl,\r\n  setSelectedChannel,\r\n  selectedChannel,\r\n  selectedTeamId,\r\n}) => {\r\n  const history = useHistory();\r\n  const match = useRouteMatch<{ teamId: string }>();\r\n  if (!channel) return null;\r\n  const handleSelectChannel = () => {\r\n    setSelectedChannel(channel);\r\n    history.push(`/view-team/${selectedTeamId}/${channel.id}`);\r\n  };\r\n  return (\r\n    <ListItem\r\n      pl={pl}\r\n      onClick={handleSelectChannel}\r\n      backgroundColor={\r\n        selectedChannel?.id === channel.id ? '#243855' : undefined\r\n      }\r\n    >\r\n      <Text as=\"span\" fontWeight=\"bold\" mr={4}>\r\n        #\r\n      </Text>\r\n      {channel.name}\r\n    </ListItem>\r\n  );\r\n};\r\n",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\UserItem\\index.tsx",["264"],"import { Box, BoxProps, Flex, Text } from '@chakra-ui/react';\r\nimport React, { FC } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  RegularChannelFragment,\r\n  RegularUserStatusFragment,\r\n} from '../../../../../../graphql/generated';\r\nimport { ListItem } from '../ListItem';\r\n\r\ninterface Props {\r\n  channel: RegularChannelFragment;\r\n  pl?: BoxProps['pl'];\r\n  setSelectedChannel: (selectedChannel: RegularChannelFragment) => void;\r\n  selectedChannel: RegularChannelFragment | null | undefined;\r\n  selectedTeamId: string;\r\n  currentUserName: string;\r\n  isOnline?: boolean;\r\n}\r\n\r\nexport const UserItem: FC<Props> = ({\r\n  channel,\r\n  pl,\r\n  selectedChannel,\r\n  setSelectedChannel,\r\n  selectedTeamId,\r\n  currentUserName,\r\n  isOnline,\r\n}) => {\r\n  const history = useHistory();\r\n\r\n  const handleSelectChannel = () => {\r\n    setSelectedChannel(channel);\r\n    history.push(`/view-team/${selectedTeamId}/user/${channel.id}`);\r\n  };\r\n\r\n  return (\r\n    <ListItem\r\n      pl={pl}\r\n      backgroundColor={\r\n        selectedChannel?.id === channel.id ? '#243855' : undefined\r\n      }\r\n      onClick={handleSelectChannel}\r\n    >\r\n      <Flex alignItems=\"center\">\r\n        <Box\r\n          width=\"12px\"\r\n          height=\"12px\"\r\n          rounded=\"6px\"\r\n          backgroundColor={isOnline ? 'green.400' : 'gray.500'}\r\n          border=\"#1e3250 1px solid\"\r\n          mr={4}\r\n        />\r\n        <Text>\r\n          {channel.name.split(', ').filter((name) => name !== currentUserName)}\r\n        </Text>\r\n      </Flex>\r\n    </ListItem>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ListItem\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\TeamItem\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Header\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\Sidebar\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\AddChannelModal\\index.tsx",["265"],"import {\r\n  Alert,\r\n  AlertDescription,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Switch,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { Form, Formik } from 'formik';\r\nimport React, { FC } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Select from 'react-select';\r\nimport {\r\n  Channel,\r\n  MeDocument,\r\n  MemberMultiselect,\r\n  MeQuery,\r\n  useCreateChannelMutation,\r\n  useGetTeamMembersQuery,\r\n} from '../../graphql/generated';\r\nimport { toErrorMap } from '../../utils/toErrorMap';\r\nimport InputField from '../InputField';\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  selectedTeamId: string;\r\n  setSelectedChannel: (\r\n    selectedChannel: {\r\n      __typename?: 'Channel' | undefined;\r\n    } & Pick<Channel, 'id' | 'name' | 'public'>\r\n  ) => void;\r\n  currentUserId: string;\r\n}\r\n\r\nexport const AddChannelModal: FC<Props> = ({\r\n  isOpen,\r\n  onClose,\r\n  selectedTeamId,\r\n  setSelectedChannel,\r\n  currentUserId,\r\n}) => {\r\n  if (!selectedTeamId) return null;\r\n  const [createChannel] = useCreateChannelMutation();\r\n  const { data, loading } = useGetTeamMembersQuery({\r\n    variables: { teamId: selectedTeamId },\r\n    fetchPolicy: 'network-only',\r\n  });\r\n  const history = useHistory();\r\n  if (!selectedTeamId || loading || !data) return null;\r\n  return (\r\n    <>\r\n      <Modal\r\n        returnFocusOnClose={false}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Create a team channel</ModalHeader>\r\n          <ModalBody>\r\n            <Formik\r\n              initialValues={{\r\n                name: '',\r\n                teamId: selectedTeamId,\r\n                public: true,\r\n                users: [] as MemberMultiselect[],\r\n              }}\r\n              onSubmit={async (values, { setErrors }) => {\r\n                // console.log(values);\r\n                try {\r\n                  const response = await createChannel({\r\n                    variables: values,\r\n                    // Update cache on channel created\r\n                    update: (store, { data }) => {\r\n                      // If channel could not be created\r\n                      if (!data?.createChannel || !data.createChannel.ok)\r\n                        return null;\r\n\r\n                      // Fetch old data from cache\r\n                      const oldData = store.readQuery<MeQuery>({\r\n                        query: MeDocument,\r\n                      });\r\n\r\n                      // Check if old data exists\r\n                      if (oldData?.me.teams && data.createChannel.channel) {\r\n                        // Write new channel data to cache\r\n                        store.writeQuery<MeQuery>({\r\n                          query: MeDocument,\r\n                          data: {\r\n                            /**\r\n                             * map over team array.\r\n                             * if the selected team is in the array and the channel was created,\r\n                             * add for that team's channels list the newly created channel.\r\n                             */\r\n                            me: {\r\n                              ...oldData.me,\r\n                              teams: oldData.me.teams.map((team, i) => {\r\n                                if (\r\n                                  team.id === selectedTeamId &&\r\n                                  data.createChannel.channel &&\r\n                                  oldData.me.teams &&\r\n                                  oldData.me.teams[i]\r\n                                ) {\r\n                                  return {\r\n                                    ...team,\r\n                                    channels: [\r\n                                      ...(oldData.me.teams[i].channels || []),\r\n                                      data.createChannel.channel,\r\n                                    ],\r\n                                  };\r\n                                }\r\n                                return team;\r\n                              }),\r\n                            },\r\n                          },\r\n                        });\r\n                      }\r\n                    },\r\n                  });\r\n                  if (response.data?.createChannel.errors) {\r\n                    setErrors(toErrorMap(response.data?.createChannel.errors));\r\n                  } else if (response.data?.createChannel.channel) {\r\n                    // Close madal after cache was updated\r\n                    history.push(\r\n                      `/view-team/${selectedTeamId}/${response.data.createChannel.channel?.id}`\r\n                    );\r\n                    setSelectedChannel(response.data.createChannel.channel);\r\n                    onClose();\r\n                  }\r\n                } catch (e) {\r\n                  console.log(e.message);\r\n                }\r\n              }}\r\n            >\r\n              {({\r\n                handleBlur,\r\n                handleChange,\r\n                isSubmitting,\r\n                setFieldValue,\r\n                values,\r\n                errors,\r\n              }) => (\r\n                <Form>\r\n                  <Heading size=\"lg\" fontWeight=\"light\" mb={3}></Heading>\r\n                  <Box my={3}>\r\n                    <InputField\r\n                      autoFocus\r\n                      onBlur={handleBlur}\r\n                      name=\"name\"\r\n                      placeholder=\"Enter channel name...\"\r\n                      label=\"Channel Name\"\r\n                      type=\"text\"\r\n                      autoComplete=\"false\"\r\n                    />\r\n                  </Box>\r\n\r\n                  <FormControl display=\"flex\" alignItems=\"center\">\r\n                    <FormLabel htmlFor=\"public-channel\" mb=\"0\">\r\n                      Make channel private?\r\n                    </FormLabel>\r\n                    <Switch\r\n                      onBlur={handleBlur}\r\n                      id=\"public-channel\"\r\n                      checked={!values.public}\r\n                      onChange={(e) => {\r\n                        setFieldValue('public', !e.target.checked);\r\n                        if (!e.target.checked)\r\n                          setFieldValue('users', [] as MemberMultiselect[]);\r\n                      }}\r\n                    />\r\n                  </FormControl>\r\n                  {!values.public && (\r\n                    <>\r\n                      <FormLabel mt={2}>Add private chat members</FormLabel>\r\n                      <Select\r\n                        styles={{\r\n                          control: (base, state) => ({\r\n                            ...base,\r\n                            borderColor: state.isFocused\r\n                              ? '#3182ce'\r\n                              : '#E2E8F0',\r\n                            boxShadow: state.isFocused\r\n                              ? '0 0 0 1px #3182ce'\r\n                              : undefined,\r\n                            '&:hover': {\r\n                              borderColor: state.isFocused\r\n                                ? '#3182ce'\r\n                                : '#CBD5E0',\r\n                            },\r\n                          }),\r\n                          option: (base, state) => ({\r\n                            ...base,\r\n                            backgroundColor:\r\n                              state.isFocused && state.isSelected\r\n                                ? '#3182ce'\r\n                                : state.isFocused\r\n                                ? '#a7c6e4'\r\n                                : state.isSelected\r\n                                ? '#3182ce'\r\n                                : undefined,\r\n                            color:\r\n                              state.isFocused || state.isSelected\r\n                                ? 'white'\r\n                                : undefined,\r\n                          }),\r\n                          multiValueLabel: (base) => ({\r\n                            ...base,\r\n                            backgroundColor: '#3182ce',\r\n                            color: 'white',\r\n                            borderRadius: 0,\r\n                          }),\r\n                          multiValueRemove: (base) => ({\r\n                            ...base,\r\n                            backgroundColor: '#3182ce',\r\n                            color: 'white',\r\n                            borderRadius: 0,\r\n                            cursor: 'pointer',\r\n                            transition: 'all 0.1s ease',\r\n                            '&:hover': {\r\n                              background: '#c5245a',\r\n                              color: 'white',\r\n                            },\r\n                          }),\r\n                        }}\r\n                        onChange={(newArr) => {\r\n                          setFieldValue('users', newArr);\r\n                        }}\r\n                        defaultValue={[]}\r\n                        isMulti\r\n                        name=\"members\"\r\n                        placeholder=\"Select members...\"\r\n                        value={values.users}\r\n                        options={data?.getTeamMembers\r\n                          .filter((member) => member.id !== currentUserId)\r\n                          .map((member) => ({\r\n                            value: member.id,\r\n                            label: member.username,\r\n                          }))}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                      <Text fontSize=\"sm\" color=\"gray.500\">\r\n                        You will be invited to this channel automatically\r\n                      </Text>\r\n                    </>\r\n                  )}\r\n\r\n                  {/* General Errors Start*/}\r\n                  {errors.teamId && (\r\n                    <Alert status=\"error\">\r\n                      <AlertIcon />\r\n                      <AlertTitle mr={2}>Error!</AlertTitle>\r\n                      <AlertDescription>{errors.teamId}</AlertDescription>\r\n                    </Alert>\r\n                  )}\r\n                  {/* General Errors End*/}\r\n\r\n                  <Button\r\n                    disabled={isSubmitting}\r\n                    isLoading={isSubmitting}\r\n                    mt={3}\r\n                    type=\"submit\"\r\n                    colorScheme=\"blue\"\r\n                    w=\"100%\"\r\n                  >\r\n                    Create Channel\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InvitePoepleModal\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\ChatInput\\index.tsx",["266"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\accessToken.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\DirectMessageModal\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\session.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FileUpload\\index.tsx",["267","268","269"],"import { Box, BoxProps } from '@chakra-ui/react';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport {\r\n  RegularChannelFragment,\r\n  RegularUserFragment,\r\n  useUploadFileDirectMutation,\r\n  useUploadFileMutation,\r\n} from '../../graphql/generated';\r\n\r\ninterface Props extends BoxProps {\r\n  noClick?: boolean;\r\n  teamId: string;\r\n  channelId: string;\r\n  to: RegularChannelFragment;\r\n}\r\n\r\nexport const FileUpload: FC<Props> = ({\r\n  children,\r\n  height,\r\n  noClick = false,\r\n  teamId,\r\n  channelId,\r\n  to,\r\n}) => {\r\n  const [uploadFile] = useUploadFileMutation();\r\n\r\n  const onDrop = useCallback(\r\n    async ([f]) => {\r\n      const file: any = new Blob([f], { type: f.type });\r\n      file.name = f.name;\r\n      if (file) {\r\n        try {\r\n          console.log(to);\r\n          await uploadFile({ variables: { file, teamId, channelId } });\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n    },\r\n    [to]\r\n  );\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop,\r\n    noClick,\r\n  });\r\n  return (\r\n    <Box height={height} {...getRootProps()} _focus={{ outline: 'none' }}>\r\n      <div>\r\n        <input {...getInputProps()} />\r\n        {children}\r\n      </div>\r\n    </Box>\r\n  );\r\n};\r\n",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\Message\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\CircleIconButton\\index.tsx",["270","271"],"import {\r\n  Flex,\r\n  ButtonProps,\r\n  FlexProps,\r\n  Tooltip,\r\n  Button,\r\n} from '@chakra-ui/react';\r\nimport React, { FC } from 'react';\r\nimport { IconType } from 'react-icons';\r\n\r\ninterface Props extends FlexProps {\r\n  size: 'small' | 'regular';\r\n  icon: IconType;\r\n  label: string;\r\n}\r\n\r\nexport const CircleIconButton: FC<Props> = ({\r\n  size,\r\n  icon: Icon,\r\n  onClick,\r\n  label,\r\n  ...flexProps\r\n}) => {\r\n  return (\r\n    <Tooltip placement=\"right\" label={label}>\r\n      <Flex\r\n        {...flexProps}\r\n        onClick={onClick}\r\n        backgroundColor=\"blue.600\"\r\n        cursor=\"pointer\"\r\n        align=\"center\"\r\n        justify=\"center\"\r\n        borderRadius=\"50%\"\r\n        boxSize={size === 'small' ? '20px' : '32px'}\r\n        _hover={{ backgroundColor: 'blue.400', borderRadius: '25%' }}\r\n        transition=\"all 0.1s ease-in-out\"\r\n      >\r\n        <Icon size={size === 'small' ? '18px' : '30px'} />\r\n      </Flex>\r\n    </Tooltip>\r\n  );\r\n};\r\n",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\MessageItem\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\NewMessages\\index.tsx",["272"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\SessionContext.tsx",["273"],"/* eslint-disable @typescript-eslint/no-empty-function */\r\nimport { createContext, useContext, useState } from 'react';\r\nimport { initialSession, Session } from './session';\r\nimport React from 'react';\r\n\r\nexport const SessionContext = createContext<\r\n  [Session, (session: Session) => void]\r\n>([initialSession, () => {}]);\r\nexport const useSessionContext = () => useContext(SessionContext);\r\n\r\nexport const SessionContextProvider: React.FC = (props) => {\r\n  const [sessionState, setSessionState] = useState(initialSession);\r\n  const defaultSessionContext: [Session, typeof setSessionState] = [\r\n    sessionState,\r\n    setSessionState,\r\n  ];\r\n\r\n  return (\r\n    <SessionContext.Provider value={defaultSessionContext}>\r\n      {props.children}\r\n    </SessionContext.Provider>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\getBase64Value.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\PublicRoute\\index.tsx",[],{"ruleId":"274","severity":1,"message":"275","line":2,"column":25,"nodeType":"276","messageId":"277","endLine":2,"endColumn":30},{"ruleId":"274","severity":1,"message":"278","line":3,"column":10,"nodeType":"276","messageId":"277","endLine":3,"endColumn":16},{"ruleId":"274","severity":1,"message":"279","line":3,"column":10,"nodeType":"276","messageId":"277","endLine":3,"endColumn":26},{"ruleId":"280","severity":1,"message":"281","line":15,"column":14,"nodeType":"282","messageId":"283","endLine":15,"endColumn":17,"suggestions":"284"},{"ruleId":"280","severity":1,"message":"281","line":17,"column":11,"nodeType":"282","messageId":"283","endLine":17,"endColumn":14,"suggestions":"285"},{"ruleId":"286","severity":1,"message":"287","line":753,"column":8,"nodeType":"288","messageId":"289","endLine":753,"endColumn":138},{"ruleId":"286","severity":1,"message":"287","line":796,"column":8,"nodeType":"288","messageId":"289","endLine":796,"endColumn":138},{"ruleId":"286","severity":1,"message":"287","line":841,"column":8,"nodeType":"288","messageId":"289","endLine":841,"endColumn":129},{"ruleId":"286","severity":1,"message":"287","line":871,"column":8,"nodeType":"288","messageId":"289","endLine":871,"endColumn":138},{"ruleId":"286","severity":1,"message":"287","line":911,"column":8,"nodeType":"288","messageId":"289","endLine":911,"endColumn":135},{"ruleId":"286","severity":1,"message":"287","line":951,"column":8,"nodeType":"288","messageId":"289","endLine":951,"endColumn":114},{"ruleId":"286","severity":1,"message":"287","line":980,"column":8,"nodeType":"288","messageId":"289","endLine":980,"endColumn":117},{"ruleId":"286","severity":1,"message":"287","line":1017,"column":8,"nodeType":"288","messageId":"289","endLine":1017,"endColumn":123},{"ruleId":"286","severity":1,"message":"287","line":1049,"column":8,"nodeType":"288","messageId":"289","endLine":1049,"endColumn":129},{"ruleId":"286","severity":1,"message":"287","line":1081,"column":8,"nodeType":"288","messageId":"289","endLine":1081,"endColumn":147},{"ruleId":"286","severity":1,"message":"287","line":1110,"column":8,"nodeType":"288","messageId":"289","endLine":1110,"endColumn":111},{"ruleId":"286","severity":1,"message":"287","line":1113,"column":8,"nodeType":"288","messageId":"289","endLine":1113,"endColumn":119},{"ruleId":"286","severity":1,"message":"287","line":1143,"column":8,"nodeType":"288","messageId":"289","endLine":1143,"endColumn":128},{"ruleId":"286","severity":1,"message":"287","line":1146,"column":8,"nodeType":"288","messageId":"289","endLine":1146,"endColumn":137},{"ruleId":"286","severity":1,"message":"287","line":1179,"column":8,"nodeType":"288","messageId":"289","endLine":1179,"endColumn":93},{"ruleId":"286","severity":1,"message":"287","line":1182,"column":8,"nodeType":"288","messageId":"289","endLine":1182,"endColumn":101},{"ruleId":"286","severity":1,"message":"287","line":1216,"column":8,"nodeType":"288","messageId":"289","endLine":1216,"endColumn":110},{"ruleId":"286","severity":1,"message":"287","line":1219,"column":8,"nodeType":"288","messageId":"289","endLine":1219,"endColumn":119},{"ruleId":"286","severity":1,"message":"287","line":1260,"column":8,"nodeType":"288","messageId":"289","endLine":1260,"endColumn":119},{"ruleId":"286","severity":1,"message":"287","line":1263,"column":8,"nodeType":"288","messageId":"289","endLine":1263,"endColumn":128},{"ruleId":"286","severity":1,"message":"287","line":1294,"column":8,"nodeType":"288","messageId":"289","endLine":1294,"endColumn":122},{"ruleId":"286","severity":1,"message":"287","line":1297,"column":8,"nodeType":"288","messageId":"289","endLine":1297,"endColumn":131},{"ruleId":"286","severity":1,"message":"287","line":1337,"column":8,"nodeType":"288","messageId":"289","endLine":1337,"endColumn":165},{"ruleId":"286","severity":1,"message":"287","line":1374,"column":8,"nodeType":"288","messageId":"289","endLine":1374,"endColumn":162},{"ruleId":"286","severity":1,"message":"287","line":1403,"column":8,"nodeType":"288","messageId":"289","endLine":1403,"endColumn":153},{"ruleId":"274","severity":1,"message":"290","line":15,"column":64,"nodeType":"276","messageId":"277","endLine":15,"endColumn":69},{"ruleId":"274","severity":1,"message":"291","line":1,"column":15,"nodeType":"276","messageId":"277","endLine":1,"endColumn":21},{"ruleId":"274","severity":1,"message":"292","line":5,"column":3,"nodeType":"276","messageId":"277","endLine":5,"endColumn":28},{"ruleId":"274","severity":1,"message":"293","line":9,"column":3,"nodeType":"276","messageId":"277","endLine":9,"endColumn":22},{"ruleId":"274","severity":1,"message":"294","line":21,"column":28,"nodeType":"276","messageId":"277","endLine":21,"endColumn":34},{"ruleId":"274","severity":1,"message":"295","line":35,"column":9,"nodeType":"276","messageId":"277","endLine":35,"endColumn":21},{"ruleId":"274","severity":1,"message":"296","line":56,"column":17,"nodeType":"276","messageId":"277","endLine":56,"endColumn":24},{"ruleId":"274","severity":1,"message":"297","line":60,"column":9,"nodeType":"276","messageId":"277","endLine":60,"endColumn":16},{"ruleId":"274","severity":1,"message":"298","line":26,"column":9,"nodeType":"276","messageId":"277","endLine":26,"endColumn":19},{"ruleId":"274","severity":1,"message":"299","line":6,"column":3,"nodeType":"276","messageId":"277","endLine":6,"endColumn":22},{"ruleId":"274","severity":1,"message":"300","line":26,"column":9,"nodeType":"276","messageId":"277","endLine":26,"endColumn":14},{"ruleId":"274","severity":1,"message":"301","line":6,"column":3,"nodeType":"276","messageId":"277","endLine":6,"endColumn":28},{"ruleId":"274","severity":1,"message":"302","line":150,"column":17,"nodeType":"276","messageId":"277","endLine":150,"endColumn":29},{"ruleId":"274","severity":1,"message":"303","line":8,"column":10,"nodeType":"276","messageId":"277","endLine":8,"endColumn":21},{"ruleId":"274","severity":1,"message":"299","line":6,"column":3,"nodeType":"276","messageId":"277","endLine":6,"endColumn":22},{"ruleId":"274","severity":1,"message":"304","line":7,"column":3,"nodeType":"276","messageId":"277","endLine":7,"endColumn":30},{"ruleId":"280","severity":1,"message":"281","line":30,"column":19,"nodeType":"282","messageId":"283","endLine":30,"endColumn":22,"suggestions":"305"},{"ruleId":"274","severity":1,"message":"306","line":3,"column":3,"nodeType":"276","messageId":"277","endLine":3,"endColumn":14},{"ruleId":"274","severity":1,"message":"291","line":6,"column":3,"nodeType":"276","messageId":"277","endLine":6,"endColumn":9},{"ruleId":"274","severity":1,"message":"307","line":8,"column":3,"nodeType":"276","messageId":"277","endLine":8,"endColumn":27},{"ruleId":"286","severity":1,"message":"287","line":9,"column":34,"nodeType":"308","messageId":"289","endLine":9,"endColumn":39},"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'useAllUsersQuery' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["309","310"],["311","312"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","'match' is defined but never used.","'Button' is defined but never used.","'NewChannelMessageDocument' is defined but never used.","'useNewMessagesQuery' is defined but never used.","'client' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'loading' is assigned a value but never used.","'history' is assigned a value but never used.","'scrollable' is assigned a value but never used.","'RegularUserFragment' is defined but never used.","'match' is assigned a value but never used.","'RegularUserStatusFragment' is defined but never used.","'handleChange' is defined but never used.","'randomBytes' is defined but never used.","'useUploadFileDirectMutation' is defined but never used.",["313","314"],"'ButtonProps' is defined but never used.","'useDeleteMessageMutation' is defined but never used.","ArrowFunctionExpression",{"messageId":"315","fix":"316","desc":"317"},{"messageId":"318","fix":"319","desc":"320"},{"messageId":"315","fix":"321","desc":"317"},{"messageId":"318","fix":"322","desc":"320"},{"messageId":"315","fix":"323","desc":"317"},{"messageId":"318","fix":"324","desc":"320"},"suggestUnknown",{"range":"325","text":"326"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"325","text":"327"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"328","text":"326"},{"range":"328","text":"327"},{"range":"329","text":"326"},{"range":"329","text":"327"},[709,712],"unknown","never",[784,787],[686,689]]