[{"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\reportWebVitals.ts":"1","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\index.tsx":"2","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\index.tsx":"3","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Home\\index.tsx":"4","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\graphql\\generated\\index.tsx":"5","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Register\\index.tsx":"6","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InputField\\index.tsx":"7","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\toErrorMap.ts":"8","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Login\\index.tsx":"9","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\CreateTeam\\index.tsx":"10","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\authentication.ts":"11","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\ProtectedRoute\\index.tsx":"12","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\Navbar\\index.tsx":"13","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FullPage\\index.tsx":"14","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\index.tsx":"15","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\index.tsx":"16","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Input\\index.tsx":"17","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\AppLayout\\index.tsx":"18","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\index.tsx":"19","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\index.tsx":"20","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\index.tsx":"21","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ChannelItem\\index.tsx":"22","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\UserItem\\index.tsx":"23","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ListItem\\index.tsx":"24","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\TeamItem\\index.tsx":"25","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Header\\index.tsx":"26","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\Sidebar\\index.tsx":"27","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\AddChannelModal\\index.tsx":"28","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InvitePoepleModal\\index.tsx":"29","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\index.ts":"30","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\ChatInput\\index.tsx":"31","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\accessToken.ts":"32","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\index.ts":"33","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\index.ts":"34","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\index.ts":"35","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\DirectMessageModal\\index.tsx":"36","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\session.ts":"37","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\index.ts":"38","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FileUpload\\index.tsx":"39","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\Message\\index.tsx":"40","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\index.ts":"41","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\index.ts":"42","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\CircleIconButton\\index.tsx":"43","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\MessageItem\\index.tsx":"44","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\SessionContext.tsx":"45","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\getBase64Value.ts":"46","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\PublicRoute\\index.tsx":"47"},{"size":431,"mtime":1608898048476,"results":"48","hashOfConfig":"49"},{"size":2227,"mtime":1610459273717,"results":"50","hashOfConfig":"49"},{"size":4942,"mtime":1611669484081,"results":"51","hashOfConfig":"49"},{"size":264,"mtime":1610640147966,"results":"52","hashOfConfig":"49"},{"size":41339,"mtime":1611666857788,"results":"53","hashOfConfig":"49"},{"size":2948,"mtime":1609172166922,"results":"54","hashOfConfig":"49"},{"size":958,"mtime":1608913265686,"results":"55","hashOfConfig":"49"},{"size":292,"mtime":1608904492685,"results":"56","hashOfConfig":"49"},{"size":3947,"mtime":1611329017327,"results":"57","hashOfConfig":"49"},{"size":3696,"mtime":1610640387730,"results":"58","hashOfConfig":"49"},{"size":240,"mtime":1608920765385,"results":"59","hashOfConfig":"49"},{"size":1084,"mtime":1611663531746,"results":"60","hashOfConfig":"49"},{"size":1519,"mtime":1609001573752,"results":"61","hashOfConfig":"49"},{"size":419,"mtime":1608995388503,"results":"62","hashOfConfig":"49"},{"size":4590,"mtime":1611670790895,"results":"63","hashOfConfig":"49"},{"size":6511,"mtime":1611663607424,"results":"64","hashOfConfig":"49"},{"size":180,"mtime":1609002125260,"results":"65","hashOfConfig":"49"},{"size":330,"mtime":1609090979782,"results":"66","hashOfConfig":"49"},{"size":1906,"mtime":1610371660977,"results":"67","hashOfConfig":"49"},{"size":4880,"mtime":1611665871226,"results":"68","hashOfConfig":"49"},{"size":3023,"mtime":1611671189343,"results":"69","hashOfConfig":"49"},{"size":1263,"mtime":1609979706001,"results":"70","hashOfConfig":"49"},{"size":1550,"mtime":1610375299148,"results":"71","hashOfConfig":"49"},{"size":407,"mtime":1609023936752,"results":"72","hashOfConfig":"49"},{"size":1694,"mtime":1611332577210,"results":"73","hashOfConfig":"49"},{"size":535,"mtime":1609980536001,"results":"74","hashOfConfig":"49"},{"size":3177,"mtime":1611655763096,"results":"75","hashOfConfig":"49"},{"size":10964,"mtime":1611663594639,"results":"76","hashOfConfig":"49"},{"size":2695,"mtime":1610371717759,"results":"77","hashOfConfig":"49"},{"size":61,"mtime":1609003529763,"results":"78","hashOfConfig":"49"},{"size":4893,"mtime":1611604668223,"results":"79","hashOfConfig":"49"},{"size":199,"mtime":1608898580850,"results":"80","hashOfConfig":"49"},{"size":268,"mtime":1610031675367,"results":"81","hashOfConfig":"49"},{"size":29,"mtime":1609004646311,"results":"82","hashOfConfig":"49"},{"size":28,"mtime":1609010816707,"results":"83","hashOfConfig":"49"},{"size":8802,"mtime":1611671587380,"results":"84","hashOfConfig":"49"},{"size":149,"mtime":1608925472611,"results":"85","hashOfConfig":"49"},{"size":30,"mtime":1609170976229,"results":"86","hashOfConfig":"49"},{"size":1188,"mtime":1611663585443,"results":"87","hashOfConfig":"49"},{"size":884,"mtime":1611674163195,"results":"88","hashOfConfig":"49"},{"size":198,"mtime":1610030900875,"results":"89","hashOfConfig":"49"},{"size":60,"mtime":1611604129572,"results":"90","hashOfConfig":"49"},{"size":1044,"mtime":1611607602860,"results":"91","hashOfConfig":"49"},{"size":3690,"mtime":1611674970960,"results":"92","hashOfConfig":"49"},{"size":783,"mtime":1608925505942,"results":"93","hashOfConfig":"49"},{"size":254,"mtime":1610283744254,"results":"94","hashOfConfig":"49"},{"size":777,"mtime":1610459196685,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1xrzby7",{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"112"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\reportWebVitals.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\index.tsx",["211","212"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\index.tsx",["213","214"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Home\\index.tsx",["215"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\graphql\\generated\\index.tsx",["216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Register\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InputField\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\toErrorMap.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Login\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\CreateTeam\\index.tsx",["239"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\authentication.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\ProtectedRoute\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\Navbar\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FullPage\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Input\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\AppLayout\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\index.tsx",["240","241"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\index.tsx",["242"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ChannelItem\\index.tsx",["243","244"],"import { BoxProps, Text } from '@chakra-ui/react';\r\nimport React, { FC } from 'react';\r\nimport { useHistory, useRouteMatch } from 'react-router';\r\nimport {\r\n  RegularChannelFragment,\r\n  RegularUserFragment,\r\n} from '../../../../../../graphql/generated';\r\nimport { ListItem } from '../ListItem';\r\n\r\ninterface Props {\r\n  channel: RegularChannelFragment;\r\n  pl?: BoxProps['pl'];\r\n  setSelectedChannel: (selectedChannel: RegularChannelFragment) => void;\r\n  selectedChannel: RegularChannelFragment | null | undefined;\r\n  selectedTeamId: string | undefined;\r\n}\r\n\r\nexport const ChannelItem: FC<Props> = ({\r\n  channel,\r\n  pl,\r\n  setSelectedChannel,\r\n  selectedChannel,\r\n  selectedTeamId,\r\n}) => {\r\n  const history = useHistory();\r\n  const match = useRouteMatch<{ teamId: string }>();\r\n  if (!channel) return null;\r\n  const handleSelectChannel = () => {\r\n    setSelectedChannel(channel);\r\n    history.push(`/view-team/${selectedTeamId}/${channel.id}`);\r\n  };\r\n  return (\r\n    <ListItem\r\n      pl={pl}\r\n      onClick={handleSelectChannel}\r\n      backgroundColor={\r\n        selectedChannel?.id === channel.id ? '#243855' : undefined\r\n      }\r\n    >\r\n      <Text as=\"span\" fontWeight=\"bold\" mr={4}>\r\n        #\r\n      </Text>\r\n      {channel.name}\r\n    </ListItem>\r\n  );\r\n};\r\n",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\UserItem\\index.tsx",["245"],"import { Box, BoxProps, Flex, Text } from '@chakra-ui/react';\r\nimport React, { FC } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  RegularChannelFragment,\r\n  RegularUserStatusFragment,\r\n} from '../../../../../../graphql/generated';\r\nimport { ListItem } from '../ListItem';\r\n\r\ninterface Props {\r\n  channel: RegularChannelFragment;\r\n  pl?: BoxProps['pl'];\r\n  setSelectedChannel: (selectedChannel: RegularChannelFragment) => void;\r\n  selectedChannel: RegularChannelFragment | null | undefined;\r\n  selectedTeamId: string;\r\n  currentUserName: string;\r\n  isOnline?: boolean;\r\n}\r\n\r\nexport const UserItem: FC<Props> = ({\r\n  channel,\r\n  pl,\r\n  selectedChannel,\r\n  setSelectedChannel,\r\n  selectedTeamId,\r\n  currentUserName,\r\n  isOnline,\r\n}) => {\r\n  const history = useHistory();\r\n\r\n  const handleSelectChannel = () => {\r\n    setSelectedChannel(channel);\r\n    history.push(`/view-team/${selectedTeamId}/user/${channel.id}`);\r\n  };\r\n\r\n  return (\r\n    <ListItem\r\n      pl={pl}\r\n      backgroundColor={\r\n        selectedChannel?.id === channel.id ? '#243855' : undefined\r\n      }\r\n      onClick={handleSelectChannel}\r\n    >\r\n      <Flex alignItems=\"center\">\r\n        <Box\r\n          width=\"12px\"\r\n          height=\"12px\"\r\n          rounded=\"6px\"\r\n          backgroundColor={isOnline ? 'green.400' : 'gray.500'}\r\n          border=\"#1e3250 1px solid\"\r\n          mr={4}\r\n        />\r\n        <Text>\r\n          {channel.name.split(', ').filter((name) => name !== currentUserName)}\r\n        </Text>\r\n      </Flex>\r\n    </ListItem>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ListItem\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\TeamItem\\index.tsx",["246"],"import { Avatar, Flex, Tooltip } from '@chakra-ui/react';\r\nimport React, { FC } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport {\r\n  Channel,\r\n  RegularTeamFragment,\r\n} from '../../../../../../graphql/generated';\r\n\r\ninterface Props {\r\n  team: RegularTeamFragment;\r\n  setSelectedTeam: (selectedTeam: RegularTeamFragment) => void;\r\n  selectedId: string | undefined;\r\n  setSelectedChannel: (\r\n    selectedChannel: {\r\n      __typename?: 'Channel' | undefined;\r\n    } & Pick<Channel, 'id' | 'name' | 'public'>\r\n  ) => void;\r\n  selectedChannelId: string | undefined;\r\n}\r\n\r\nexport const TeamItem: FC<Props> = ({\r\n  team,\r\n  setSelectedTeam,\r\n  selectedId,\r\n  setSelectedChannel,\r\n  selectedChannelId,\r\n}) => {\r\n  const history = useHistory();\r\n  return (\r\n    <Flex align=\"center\" justify=\"center\" direction=\"column\">\r\n      <Tooltip placement=\"right\" label={team.name}>\r\n        <Avatar\r\n          onClick={() => {\r\n            setSelectedTeam(team);\r\n            if (team.channels && team.channels[0]) {\r\n              setSelectedChannel(team.channels[0]);\r\n              history.replace(`/view-team/${team.id}/${team.channels[0].id}`);\r\n            }\r\n          }}\r\n          backgroundColor={selectedId === team.id ? '#235699' : '#262f3b'}\r\n          mt={2}\r\n          src={undefined}\r\n          name={team.name}\r\n          width={10}\r\n          height={10}\r\n          color=\"white\"\r\n          transition=\"all 0.1s cubic-bezier(0.65, 0.05, 0.36, 1)\"\r\n          _hover={{\r\n            backgroundColor: selectedId !== team.id ? '#457dc5' : '#457dc5',\r\n            borderRadius: '25%',\r\n          }}\r\n          cursor=\"pointer\"\r\n        />\r\n      </Tooltip>\r\n    </Flex>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Header\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\Sidebar\\index.tsx",["247"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\AddChannelModal\\index.tsx",["248","249"],"import {\r\n  Alert,\r\n  AlertDescription,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Switch,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { Form, Formik } from 'formik';\r\nimport { motion } from 'framer-motion';\r\nimport React, { FC } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Select from 'react-select';\r\nimport {\r\n  Channel,\r\n  MeDocument,\r\n  MemberMultiselect,\r\n  MeQuery,\r\n  useCreateChannelMutation,\r\n  useGetTeamMembersQuery,\r\n} from '../../graphql/generated';\r\nimport { toErrorMap } from '../../utils/toErrorMap';\r\nimport InputField from '../InputField';\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  selectedTeamId: string;\r\n  setSelectedChannel: (\r\n    selectedChannel: {\r\n      __typename?: 'Channel' | undefined;\r\n    } & Pick<Channel, 'id' | 'name' | 'public'>\r\n  ) => void;\r\n  currentUserId: string;\r\n}\r\n\r\nexport const AddChannelModal: FC<Props> = ({\r\n  isOpen,\r\n  onClose,\r\n  selectedTeamId,\r\n  setSelectedChannel,\r\n  currentUserId,\r\n}) => {\r\n  if (!selectedTeamId) return null;\r\n  const [createChannel] = useCreateChannelMutation();\r\n  const { data, loading } = useGetTeamMembersQuery({\r\n    skip: !isOpen,\r\n    variables: { teamId: selectedTeamId },\r\n    fetchPolicy: 'network-only',\r\n  });\r\n  const history = useHistory();\r\n  if (!selectedTeamId || loading || !data) return null;\r\n  return (\r\n    <>\r\n      <Modal\r\n        returnFocusOnClose={false}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n        motionPreset=\"slideInBottom\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Create a team channel</ModalHeader>\r\n          <ModalBody>\r\n            <Formik\r\n              initialValues={{\r\n                name: '',\r\n                teamId: selectedTeamId,\r\n                public: true,\r\n                users: [] as MemberMultiselect[],\r\n              }}\r\n              onSubmit={async (values, { setErrors }) => {\r\n                try {\r\n                  const response = await createChannel({\r\n                    variables: values,\r\n                    // Update cache on channel created\r\n                    update: (store, { data }) => {\r\n                      // If channel could not be created\r\n                      if (!data?.createChannel || !data.createChannel.ok)\r\n                        return null;\r\n\r\n                      // Fetch old data from cache\r\n                      const oldData = store.readQuery<MeQuery>({\r\n                        query: MeDocument,\r\n                      });\r\n\r\n                      // Check if old data exists\r\n                      if (oldData?.me.teams && data.createChannel.channel) {\r\n                        // Write new channel data to cache\r\n                        store.writeQuery<MeQuery>({\r\n                          query: MeDocument,\r\n                          data: {\r\n                            /**\r\n                             * map over team array.\r\n                             * if the selected team is in the array and the channel was created,\r\n                             * add for that team's channels list the newly created channel.\r\n                             */\r\n                            me: {\r\n                              ...oldData.me,\r\n                              teams: oldData.me.teams.map((team, i) => {\r\n                                if (\r\n                                  team.id === selectedTeamId &&\r\n                                  data.createChannel.channel &&\r\n                                  oldData.me.teams &&\r\n                                  oldData.me.teams[i]\r\n                                ) {\r\n                                  return {\r\n                                    ...team,\r\n                                    channels: [\r\n                                      ...(oldData.me.teams[i].channels || []),\r\n                                      data.createChannel.channel,\r\n                                    ],\r\n                                  };\r\n                                }\r\n                                return team;\r\n                              }),\r\n                            },\r\n                          },\r\n                        });\r\n                      }\r\n                    },\r\n                  });\r\n                  if (response.data?.createChannel.errors) {\r\n                    setErrors(toErrorMap(response.data?.createChannel.errors));\r\n                  } else if (response.data?.createChannel.channel) {\r\n                    // Close madal after cache was updated\r\n                    history.push(\r\n                      `/view-team/${selectedTeamId}/${response.data.createChannel.channel?.id}`\r\n                    );\r\n                    setSelectedChannel(response.data.createChannel.channel);\r\n                    onClose();\r\n                  }\r\n                } catch (e) {\r\n                  console.log(e.message);\r\n                }\r\n              }}\r\n            >\r\n              {({\r\n                handleBlur,\r\n                handleChange,\r\n                isSubmitting,\r\n                setFieldValue,\r\n                values,\r\n                errors,\r\n              }) => (\r\n                <Form>\r\n                  <Heading size=\"lg\" fontWeight=\"light\" mb={3}></Heading>\r\n                  <Box my={3}>\r\n                    <InputField\r\n                      autoFocus\r\n                      onBlur={handleBlur}\r\n                      name=\"name\"\r\n                      placeholder=\"Enter channel name...\"\r\n                      label=\"Channel Name\"\r\n                      type=\"text\"\r\n                      autoComplete=\"false\"\r\n                    />\r\n                  </Box>\r\n\r\n                  <FormControl display=\"flex\" alignItems=\"center\">\r\n                    <FormLabel htmlFor=\"public-channel\" mb=\"0\">\r\n                      Make channel private?\r\n                    </FormLabel>\r\n                    <Switch\r\n                      onBlur={handleBlur}\r\n                      id=\"public-channel\"\r\n                      checked={!values.public}\r\n                      onChange={(e) => {\r\n                        setFieldValue('public', !e.target.checked);\r\n                        if (!e.target.checked)\r\n                          setFieldValue('users', [] as MemberMultiselect[]);\r\n                      }}\r\n                    />\r\n                  </FormControl>\r\n                  {!values.public && (\r\n                    <>\r\n                      <FormLabel mt={2}>Add private chat members</FormLabel>\r\n                      <Select\r\n                        styles={{\r\n                          control: (base, state) => ({\r\n                            ...base,\r\n                            borderColor: state.isFocused\r\n                              ? '#3182ce'\r\n                              : '#E2E8F0',\r\n                            boxShadow: state.isFocused\r\n                              ? '0 0 0 1px #3182ce'\r\n                              : undefined,\r\n                            '&:hover': {\r\n                              borderColor: state.isFocused\r\n                                ? '#3182ce'\r\n                                : '#CBD5E0',\r\n                            },\r\n                          }),\r\n                          option: (base, state) => ({\r\n                            ...base,\r\n                            backgroundColor:\r\n                              state.isFocused && state.isSelected\r\n                                ? '#3182ce'\r\n                                : state.isFocused\r\n                                ? '#a7c6e4'\r\n                                : state.isSelected\r\n                                ? '#3182ce'\r\n                                : undefined,\r\n                            color:\r\n                              state.isFocused || state.isSelected\r\n                                ? 'white'\r\n                                : undefined,\r\n                          }),\r\n                          multiValueLabel: (base) => ({\r\n                            ...base,\r\n                            backgroundColor: '#3182ce',\r\n                            color: 'white',\r\n                            borderRadius: 0,\r\n                          }),\r\n                          multiValueRemove: (base) => ({\r\n                            ...base,\r\n                            backgroundColor: '#3182ce',\r\n                            color: 'white',\r\n                            borderRadius: 0,\r\n                            cursor: 'pointer',\r\n                            transition: 'all 0.1s ease',\r\n                            '&:hover': {\r\n                              background: '#c5245a',\r\n                              color: 'white',\r\n                            },\r\n                          }),\r\n                        }}\r\n                        onChange={(newArr) => {\r\n                          setFieldValue('users', newArr);\r\n                        }}\r\n                        defaultValue={[]}\r\n                        isMulti\r\n                        name=\"members\"\r\n                        placeholder=\"Select members...\"\r\n                        value={values.users}\r\n                        options={data?.getTeamMembers\r\n                          .filter((member) => member.id !== currentUserId)\r\n                          .map((member) => ({\r\n                            value: member.id,\r\n                            label: member.username,\r\n                          }))}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                      <Text fontSize=\"sm\" color=\"gray.500\">\r\n                        You will be invited to this channel automatically\r\n                      </Text>\r\n                    </>\r\n                  )}\r\n\r\n                  {/* General Errors Start*/}\r\n                  {errors.teamId && (\r\n                    <Alert status=\"error\">\r\n                      <AlertIcon />\r\n                      <AlertTitle mr={2}>Error!</AlertTitle>\r\n                      <AlertDescription>{errors.teamId}</AlertDescription>\r\n                    </Alert>\r\n                  )}\r\n                  {/* General Errors End*/}\r\n\r\n                  <Button\r\n                    disabled={isSubmitting}\r\n                    isLoading={isSubmitting}\r\n                    mt={3}\r\n                    type=\"submit\"\r\n                    colorScheme=\"blue\"\r\n                    w=\"100%\"\r\n                  >\r\n                    Create Channel\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InvitePoepleModal\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\ChatInput\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\accessToken.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\DirectMessageModal\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\session.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FileUpload\\index.tsx",["250"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\Message\\index.tsx",["251"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\CircleIconButton\\index.tsx",["252","253"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\MessageItem\\index.tsx",["254","255","256"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\SessionContext.tsx",["257"],"/* eslint-disable @typescript-eslint/no-empty-function */\r\nimport { createContext, useContext, useState } from 'react';\r\nimport { initialSession, Session } from './session';\r\nimport React from 'react';\r\n\r\nexport const SessionContext = createContext<\r\n  [Session, (session: Session) => void]\r\n>([initialSession, () => {}]);\r\nexport const useSessionContext = () => useContext(SessionContext);\r\n\r\nexport const SessionContextProvider: React.FC = (props) => {\r\n  const [sessionState, setSessionState] = useState(initialSession);\r\n  const defaultSessionContext: [Session, typeof setSessionState] = [\r\n    sessionState,\r\n    setSessionState,\r\n  ];\r\n\r\n  return (\r\n    <SessionContext.Provider value={defaultSessionContext}>\r\n      {props.children}\r\n    </SessionContext.Provider>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\getBase64Value.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\PublicRoute\\index.tsx",[],[],{"ruleId":"258","severity":1,"message":"259","line":2,"column":25,"nodeType":"260","messageId":"261","endLine":2,"endColumn":30},{"ruleId":"258","severity":1,"message":"262","line":3,"column":10,"nodeType":"260","messageId":"261","endLine":3,"endColumn":16},{"ruleId":"258","severity":1,"message":"263","line":24,"column":3,"nodeType":"260","messageId":"261","endLine":24,"endColumn":10},{"ruleId":"258","severity":1,"message":"264","line":26,"column":3,"nodeType":"260","messageId":"261","endLine":26,"endColumn":28},{"ruleId":"258","severity":1,"message":"265","line":3,"column":10,"nodeType":"260","messageId":"261","endLine":3,"endColumn":26},{"ruleId":"266","severity":1,"message":"267","line":15,"column":11,"nodeType":"268","messageId":"269","endLine":15,"endColumn":14,"suggestions":"270"},{"ruleId":"271","severity":1,"message":"272","line":674,"column":8,"nodeType":"273","messageId":"274","endLine":674,"endColumn":138},{"ruleId":"271","severity":1,"message":"272","line":717,"column":8,"nodeType":"273","messageId":"274","endLine":717,"endColumn":138},{"ruleId":"271","severity":1,"message":"272","line":762,"column":8,"nodeType":"273","messageId":"274","endLine":762,"endColumn":129},{"ruleId":"271","severity":1,"message":"272","line":794,"column":8,"nodeType":"273","messageId":"274","endLine":794,"endColumn":138},{"ruleId":"271","severity":1,"message":"272","line":834,"column":8,"nodeType":"273","messageId":"274","endLine":834,"endColumn":135},{"ruleId":"271","severity":1,"message":"272","line":874,"column":8,"nodeType":"273","messageId":"274","endLine":874,"endColumn":114},{"ruleId":"271","severity":1,"message":"272","line":903,"column":8,"nodeType":"273","messageId":"274","endLine":903,"endColumn":117},{"ruleId":"271","severity":1,"message":"272","line":940,"column":8,"nodeType":"273","messageId":"274","endLine":940,"endColumn":123},{"ruleId":"271","severity":1,"message":"272","line":972,"column":8,"nodeType":"273","messageId":"274","endLine":972,"endColumn":129},{"ruleId":"271","severity":1,"message":"272","line":1001,"column":8,"nodeType":"273","messageId":"274","endLine":1001,"endColumn":111},{"ruleId":"271","severity":1,"message":"272","line":1004,"column":8,"nodeType":"273","messageId":"274","endLine":1004,"endColumn":119},{"ruleId":"271","severity":1,"message":"272","line":1034,"column":8,"nodeType":"273","messageId":"274","endLine":1034,"endColumn":128},{"ruleId":"271","severity":1,"message":"272","line":1037,"column":8,"nodeType":"273","messageId":"274","endLine":1037,"endColumn":137},{"ruleId":"271","severity":1,"message":"272","line":1070,"column":8,"nodeType":"273","messageId":"274","endLine":1070,"endColumn":93},{"ruleId":"271","severity":1,"message":"272","line":1073,"column":8,"nodeType":"273","messageId":"274","endLine":1073,"endColumn":101},{"ruleId":"271","severity":1,"message":"272","line":1107,"column":8,"nodeType":"273","messageId":"274","endLine":1107,"endColumn":110},{"ruleId":"271","severity":1,"message":"272","line":1110,"column":8,"nodeType":"273","messageId":"274","endLine":1110,"endColumn":119},{"ruleId":"271","severity":1,"message":"272","line":1141,"column":8,"nodeType":"273","messageId":"274","endLine":1141,"endColumn":122},{"ruleId":"271","severity":1,"message":"272","line":1144,"column":8,"nodeType":"273","messageId":"274","endLine":1144,"endColumn":131},{"ruleId":"271","severity":1,"message":"272","line":1174,"column":8,"nodeType":"273","messageId":"274","endLine":1174,"endColumn":156},{"ruleId":"271","severity":1,"message":"272","line":1213,"column":8,"nodeType":"273","messageId":"274","endLine":1213,"endColumn":165},{"ruleId":"271","severity":1,"message":"272","line":1242,"column":8,"nodeType":"273","messageId":"274","endLine":1242,"endColumn":153},{"ruleId":"258","severity":1,"message":"275","line":15,"column":64,"nodeType":"260","messageId":"261","endLine":15,"endColumn":69},{"ruleId":"258","severity":1,"message":"276","line":10,"column":21,"nodeType":"260","messageId":"261","endLine":10,"endColumn":30},{"ruleId":"258","severity":1,"message":"277","line":15,"column":3,"nodeType":"260","messageId":"261","endLine":15,"endColumn":24},{"ruleId":"258","severity":1,"message":"278","line":30,"column":9,"nodeType":"260","messageId":"261","endLine":30,"endColumn":19},{"ruleId":"258","severity":1,"message":"279","line":6,"column":3,"nodeType":"260","messageId":"261","endLine":6,"endColumn":22},{"ruleId":"258","severity":1,"message":"280","line":26,"column":9,"nodeType":"260","messageId":"261","endLine":26,"endColumn":14},{"ruleId":"258","severity":1,"message":"264","line":6,"column":3,"nodeType":"260","messageId":"261","endLine":6,"endColumn":28},{"ruleId":"258","severity":1,"message":"281","line":26,"column":3,"nodeType":"260","messageId":"261","endLine":26,"endColumn":20},{"ruleId":"258","severity":1,"message":"282","line":3,"column":10,"nodeType":"260","messageId":"261","endLine":3,"endColumn":16},{"ruleId":"258","severity":1,"message":"282","line":21,"column":10,"nodeType":"260","messageId":"261","endLine":21,"endColumn":16},{"ruleId":"258","severity":1,"message":"283","line":152,"column":17,"nodeType":"260","messageId":"261","endLine":152,"endColumn":29},{"ruleId":"266","severity":1,"message":"267","line":28,"column":19,"nodeType":"268","messageId":"269","endLine":28,"endColumn":22,"suggestions":"284"},{"ruleId":"258","severity":1,"message":"285","line":1,"column":23,"nodeType":"260","messageId":"261","endLine":1,"endColumn":26},{"ruleId":"258","severity":1,"message":"286","line":3,"column":3,"nodeType":"260","messageId":"261","endLine":3,"endColumn":14},{"ruleId":"258","severity":1,"message":"287","line":6,"column":3,"nodeType":"260","messageId":"261","endLine":6,"endColumn":9},{"ruleId":"258","severity":1,"message":"288","line":1,"column":10,"nodeType":"260","messageId":"261","endLine":1,"endColumn":20},{"ruleId":"258","severity":1,"message":"289","line":1,"column":22,"nodeType":"260","messageId":"261","endLine":1,"endColumn":30},{"ruleId":"258","severity":1,"message":"290","line":8,"column":3,"nodeType":"260","messageId":"261","endLine":8,"endColumn":25},{"ruleId":"271","severity":1,"message":"272","line":9,"column":34,"nodeType":"291","messageId":"274","endLine":9,"endColumn":39},"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Message' is defined but never used.","'RegularUserStatusFragment' is defined but never used.","'useAllUsersQuery' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["292","293"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","'match' is defined but never used.","'useEffect' is defined but never used.","'NewUserStatusDocument' is defined but never used.","'scrollable' is assigned a value but never used.","'RegularUserFragment' is defined but never used.","'match' is assigned a value but never used.","'selectedChannelId' is defined but never used.","'motion' is defined but never used.","'handleChange' is defined but never used.",["294","295"],"'Box' is defined but never used.","'ButtonProps' is defined but never used.","'Button' is defined but never used.","'DeleteIcon' is defined but never used.","'EditIcon' is defined but never used.","'RegularChannelFragment' is defined but never used.","ArrowFunctionExpression",{"messageId":"296","fix":"297","desc":"298"},{"messageId":"299","fix":"300","desc":"301"},{"messageId":"296","fix":"302","desc":"298"},{"messageId":"299","fix":"303","desc":"301"},"suggestUnknown",{"range":"304","text":"305"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"304","text":"306"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"307","text":"305"},{"range":"307","text":"306"},[641,644],"unknown","never",[630,633]]