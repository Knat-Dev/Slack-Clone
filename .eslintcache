[{"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\reportWebVitals.ts":"1","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\index.tsx":"2","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\index.tsx":"3","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Home\\index.tsx":"4","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\graphql\\generated\\index.tsx":"5","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Register\\index.tsx":"6","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InputField\\index.tsx":"7","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\toErrorMap.ts":"8","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Login\\index.tsx":"9","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\CreateTeam\\index.tsx":"10","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\authentication.ts":"11","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\ProtectedRoute\\index.tsx":"12","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\Navbar\\index.tsx":"13","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FullPage\\index.tsx":"14","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\index.tsx":"15","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\index.tsx":"16","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Input\\index.tsx":"17","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\AppLayout\\index.tsx":"18","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\index.tsx":"19","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\index.tsx":"20","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\index.tsx":"21","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ChannelItem\\index.tsx":"22","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\UserItem\\index.tsx":"23","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ListItem\\index.tsx":"24","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\TeamItem\\index.tsx":"25","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Header\\index.tsx":"26","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\Sidebar\\index.tsx":"27","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\AddChannelModal\\index.tsx":"28","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InvitePoepleModal\\index.tsx":"29","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\index.ts":"30","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\ChatInput\\index.tsx":"31","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\accessToken.ts":"32","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\index.ts":"33","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\index.ts":"34","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\index.ts":"35","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\DirectMessageModal\\index.tsx":"36","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\session.ts":"37","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\index.ts":"38","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FileUpload\\index.tsx":"39","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\Message\\index.tsx":"40","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\index.ts":"41","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\index.ts":"42","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\CircleIconButton\\index.tsx":"43","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\MessageItem\\index.tsx":"44","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\SessionContext.tsx":"45","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\getBase64Value.ts":"46","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\PublicRoute\\index.tsx":"47","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\CircleButton\\index.tsx":"48","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\AutoResizeTextarea\\index.tsx":"49","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\Message\\components\\TextMessage\\index.tsx":"50"},{"size":431,"mtime":1608898048476,"results":"51","hashOfConfig":"52"},{"size":2227,"mtime":1610459273717,"results":"53","hashOfConfig":"52"},{"size":4942,"mtime":1611669484081,"results":"54","hashOfConfig":"52"},{"size":264,"mtime":1610640147966,"results":"55","hashOfConfig":"52"},{"size":44809,"mtime":1611749928011,"results":"56","hashOfConfig":"52"},{"size":2948,"mtime":1609172166922,"results":"57","hashOfConfig":"52"},{"size":958,"mtime":1608913265686,"results":"58","hashOfConfig":"52"},{"size":292,"mtime":1608904492685,"results":"59","hashOfConfig":"52"},{"size":3947,"mtime":1611329017327,"results":"60","hashOfConfig":"52"},{"size":3696,"mtime":1610640387730,"results":"61","hashOfConfig":"52"},{"size":240,"mtime":1608920765385,"results":"62","hashOfConfig":"52"},{"size":1084,"mtime":1611663531746,"results":"63","hashOfConfig":"52"},{"size":1519,"mtime":1609001573752,"results":"64","hashOfConfig":"52"},{"size":419,"mtime":1608995388503,"results":"65","hashOfConfig":"52"},{"size":4751,"mtime":1611844332829,"results":"66","hashOfConfig":"52"},{"size":8709,"mtime":1611785632689,"results":"67","hashOfConfig":"52"},{"size":180,"mtime":1609002125260,"results":"68","hashOfConfig":"52"},{"size":330,"mtime":1609090979782,"results":"69","hashOfConfig":"52"},{"size":2277,"mtime":1611844802143,"results":"70","hashOfConfig":"52"},{"size":4982,"mtime":1611845123853,"results":"71","hashOfConfig":"52"},{"size":4233,"mtime":1611844180624,"results":"72","hashOfConfig":"52"},{"size":1464,"mtime":1611844687401,"results":"73","hashOfConfig":"52"},{"size":1632,"mtime":1611845106521,"results":"74","hashOfConfig":"52"},{"size":407,"mtime":1609023936752,"results":"75","hashOfConfig":"52"},{"size":1694,"mtime":1611844803058,"results":"76","hashOfConfig":"52"},{"size":1146,"mtime":1611845002078,"results":"77","hashOfConfig":"52"},{"size":3768,"mtime":1611844326499,"results":"78","hashOfConfig":"52"},{"size":10964,"mtime":1611663594639,"results":"79","hashOfConfig":"52"},{"size":2695,"mtime":1610371717759,"results":"80","hashOfConfig":"52"},{"size":61,"mtime":1609003529763,"results":"81","hashOfConfig":"52"},{"size":5242,"mtime":1611840491071,"results":"82","hashOfConfig":"52"},{"size":199,"mtime":1608898580850,"results":"83","hashOfConfig":"52"},{"size":301,"mtime":1611682299823,"results":"84","hashOfConfig":"52"},{"size":29,"mtime":1609004646311,"results":"85","hashOfConfig":"52"},{"size":28,"mtime":1609010816707,"results":"86","hashOfConfig":"52"},{"size":8854,"mtime":1611840168726,"results":"87","hashOfConfig":"52"},{"size":149,"mtime":1608925472611,"results":"88","hashOfConfig":"52"},{"size":30,"mtime":1609170976229,"results":"89","hashOfConfig":"52"},{"size":1188,"mtime":1611663585443,"results":"90","hashOfConfig":"52"},{"size":1261,"mtime":1611767304180,"results":"91","hashOfConfig":"52"},{"size":198,"mtime":1610030900875,"results":"92","hashOfConfig":"52"},{"size":60,"mtime":1611604129572,"results":"93","hashOfConfig":"52"},{"size":1044,"mtime":1611681838232,"results":"94","hashOfConfig":"52"},{"size":4203,"mtime":1611786037772,"results":"95","hashOfConfig":"52"},{"size":783,"mtime":1608925505942,"results":"96","hashOfConfig":"52"},{"size":254,"mtime":1610283744254,"results":"97","hashOfConfig":"52"},{"size":777,"mtime":1610459196685,"results":"98","hashOfConfig":"52"},{"size":858,"mtime":1611845015295,"results":"99","hashOfConfig":"52"},{"size":933,"mtime":1611843774616,"results":"100","hashOfConfig":"52"},{"size":5349,"mtime":1611775504752,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1xrzby7",{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"111"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"145"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"145"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"122"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\reportWebVitals.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\index.tsx",["224","225"],"import React, { FC } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { Navbar } from '../Components';\r\nimport { useSessionContext } from '../context/SessionContext';\r\nimport { CreateTeam } from './CreateTeam';\r\n// Routes\r\nimport { Home } from './Home';\r\nimport { Login } from './Login';\r\nimport { Register } from './Register';\r\nimport { ProtectedRoute, ProtectedRouteProps } from './util/ProtectedRoute';\r\nimport PublicRoute from './util/PublicRoute';\r\nimport { ViewTeam } from './ViewTeam';\r\n\r\nconst Routes: FC = () => {\r\n  const [sessionContext, updateSessionContext] = useSessionContext();\r\n\r\n  const setRedirectPathOnAuthentication = (path: string) => {\r\n    updateSessionContext({\r\n      ...sessionContext,\r\n      redirectPathOnAuthentication: path,\r\n    });\r\n  };\r\n\r\n  const defaultProtectedRouteProps: ProtectedRouteProps = {\r\n    isAuthenticated: !!sessionContext.isAuthenticated,\r\n    authenticationPath: '/login',\r\n    redirectPathOnAuthentication:\r\n      sessionContext.redirectPathOnAuthentication || '',\r\n    setRedirectPathOnAuthentication,\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      {/* <Navbar /> */}\r\n      <Switch>\r\n        <ProtectedRoute\r\n          {...defaultProtectedRouteProps}\r\n          exact\r\n          path=\"/\"\r\n          component={Home}\r\n        />\r\n        <PublicRoute\r\n          isAuthenticated={!!sessionContext.isAuthenticated}\r\n          exact\r\n          path=\"/register\"\r\n          component={Register}\r\n        />\r\n        <PublicRoute\r\n          isAuthenticated={!!sessionContext.isAuthenticated}\r\n          exact\r\n          path=\"/login\"\r\n          component={Login}\r\n        />\r\n        <ProtectedRoute\r\n          {...defaultProtectedRouteProps}\r\n          exact\r\n          path=\"/create-team\"\r\n          component={CreateTeam}\r\n        />\r\n        <ProtectedRoute\r\n          {...defaultProtectedRouteProps}\r\n          path=\"/view-team/:teamId?/user/:userId?\"\r\n          component={ViewTeam}\r\n        />\r\n        <ProtectedRoute\r\n          {...defaultProtectedRouteProps}\r\n          path=\"/view-team/:teamId?/:channelId?\"\r\n          component={ViewTeam}\r\n        />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\index.tsx",["226","227"],"import {\n  ApolloClient,\n  ApolloLink,\n  ApolloProvider,\n  createHttpLink,\n  DocumentNode,\n  InMemoryCache,\n  split,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport { createUploadLink } from 'apollo-upload-client';\nimport jwtDecode from 'jwt-decode';\nimport React, { FC, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  SessionContextProvider,\n  useSessionContext,\n} from './context/SessionContext';\nimport {\n  Message,\n  PaginatedMessages,\n  RegularUserStatusFragment,\n} from './graphql/generated';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Routes from './routes';\nimport { getAccessToken, setAccessToken } from './utils/accessToken';\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_API + '/graphql',\n  credentials: 'include',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = getAccessToken();\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      Authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst tokenRefreshLink = new TokenRefreshLink({\n  accessTokenField: 'accessToken',\n  isTokenValidOrUndefined: () => {\n    const token = getAccessToken();\n    if (!token) return true;\n\n    try {\n      const { exp } = jwtDecode(token) as { exp: number };\n      if (Date.now() >= exp * 1000) return false;\n      else return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  fetchAccessToken: async (): Promise<Response> => {\n    return fetch(`${process.env.REACT_APP_REFRESH_URL}`, {\n      credentials: 'include',\n      method: 'POST',\n    });\n  },\n  handleFetch: (accessToken: string) => {\n    setAccessToken(accessToken);\n  },\n  handleError: (err: Error) => {\n    console.error(err);\n  },\n});\n\nconst wsLink = new WebSocketLink({\n  // uri: `wss://api.knat.dev/graphql`,\n  uri: `${process.env.REACT_APP_WS}`,\n  options: {\n    lazy: true,\n    reconnect: true,\n    reconnectionAttempts: 10,\n    connectionParams: {\n      token: getAccessToken(),\n    },\n  },\n});\n\nconst isFile = (value: File | Blob) =>\n  (typeof File !== 'undefined' && value instanceof File) ||\n  (typeof Blob !== 'undefined' && value instanceof Blob);\n\nconst isUpload = ({ variables }: { variables: Record<string, File | Blob> }) =>\n  Object.values(variables).some(isFile);\n\nconst isSubscriptionOperation = ({ query }: { query: DocumentNode }) => {\n  const definition = getMainDefinition(query);\n  return (\n    definition.kind === 'OperationDefinition' &&\n    definition.operation === 'subscription'\n  );\n};\n\nconst requestLink = split(isSubscriptionOperation, wsLink, httpLink);\n\nconst terminalLink = split(\n  isUpload,\n  createUploadLink({ uri: process.env.REACT_APP_API + '/graphql' }),\n  requestLink\n);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          messages: {\n            keyArgs: ['id', 'channelId'],\n            merge(\n              existing: PaginatedMessages | undefined,\n              incoming: PaginatedMessages,\n              { args }\n            ) {\n              if (existing && existing.page.length > 0 && args?.cursor)\n                return {\n                  ...incoming,\n                  page: [...incoming.page, ...existing.page],\n                };\n              return {\n                ...incoming,\n              };\n            },\n          },\n        },\n      },\n    },\n  }),\n  link: ApolloLink.from([tokenRefreshLink, authLink, terminalLink]),\n});\n\nconst App: FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [sessionContext, updateSessionContext] = useSessionContext();\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API}/refresh`, {\n      credentials: 'include',\n      method: 'POST',\n    })\n      .then(async (res) => {\n        const data = await res.json();\n        const { accessToken } = data;\n        setAccessToken(accessToken);\n        if (accessToken) {\n          updateSessionContext({ ...sessionContext, isAuthenticated: true });\n        }\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }, []);\n\n  if (loading) return null;\n\n  return (\n    <ApolloProvider client={client}>\n      <ChakraProvider>\n        <Routes />\n      </ChakraProvider>\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(\n  <SessionContextProvider>\n    <App />\n  </SessionContextProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Home\\index.tsx",["228"],"import React, { FC } from 'react';\r\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\r\nimport { useAllUsersQuery } from '../../graphql/generated';\r\n\r\nexport const Home: FC<RouteComponentProps> = () => {\r\n  return <Redirect to=\"/view-team\" />;\r\n};\r\n",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\graphql\\generated\\index.tsx",["229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Register\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InputField\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\toErrorMap.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\Login\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\CreateTeam\\index.tsx",["254"],"import { Box, Button, Heading } from '@chakra-ui/react';\r\nimport { Form, Formik } from 'formik';\r\nimport React, { FC } from 'react';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { FullPage } from '../../Components';\r\nimport InputField from '../../Components/InputField';\r\nimport {\r\n  MeDocument,\r\n  MeQuery,\r\n  useCreateTeamMutation,\r\n  useMeQuery,\r\n} from '../../graphql/generated';\r\nimport { toErrorMap } from '../../utils/toErrorMap';\r\n\r\nexport const CreateTeam: FC<RouteComponentProps> = ({ history, match }) => {\r\n  const [createTeam] = useCreateTeamMutation();\r\n  const { loading } = useMeQuery();\r\n  //   useEffect(() => {\r\n  //     if (!getAccessToken()) authenticateRequest(history, match);\r\n  //   }, []);\r\n  if (loading) return null;\r\n  return (\r\n    <FullPage>\r\n      <Box minW={450} boxShadow=\"xl\" p={5} rounded=\"md\">\r\n        <Formik\r\n          initialValues={{ name: '' }}\r\n          onSubmit={async (values, { setErrors }) => {\r\n            try {\r\n              const { data } = await createTeam({\r\n                variables: values,\r\n                update: (store, { data }) => {\r\n                  if (!data?.createTeam) return null;\r\n                  const oldData = store.readQuery<MeQuery>({\r\n                    query: MeDocument,\r\n                  });\r\n\r\n                  // Check if old data exists\r\n                  if (oldData && data.createTeam.team) {\r\n                    // Write new channel data to cache\r\n                    store.writeQuery<MeQuery>({\r\n                      query: MeDocument,\r\n                      data: {\r\n                        /**\r\n                         * map over team array.\r\n                         * if the selected team is in the array and the channel was created,\r\n                         * add for that team's channels list the newly created channel.\r\n                         */\r\n                        me: {\r\n                          ...oldData.me,\r\n                          teams: [\r\n                            ...(oldData.me.teams ?? []),\r\n                            data.createTeam.team,\r\n                          ],\r\n                        },\r\n                      },\r\n                    });\r\n                    // redirect\r\n                    history.push(\r\n                      `/view-team/${data.createTeam.team.id}/${\r\n                        data.createTeam.team.channels &&\r\n                        data.createTeam.team.channels[0].id\r\n                      }`\r\n                    );\r\n                  }\r\n                },\r\n              });\r\n              if (data?.createTeam?.errors) {\r\n                setErrors(toErrorMap(data.createTeam.errors));\r\n              }\r\n            } catch (e) {\r\n              console.log(e.message);\r\n              //   if (e.message === 'Not authenticated')\r\n              //     authenticateRequest(history, match);\r\n            }\r\n          }}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              <Heading size=\"lg\" fontWeight=\"light\" mb={3}>\r\n                Create a team!\r\n              </Heading>\r\n\r\n              <Box mt={3}>\r\n                <InputField\r\n                  name=\"name\"\r\n                  placeholder=\"Enter desired team name here...\"\r\n                  label=\"Team Name\"\r\n                  type=\"text\"\r\n                />\r\n              </Box>\r\n\r\n              <Button\r\n                isLoading={isSubmitting}\r\n                mt={3}\r\n                type=\"submit\"\r\n                colorScheme=\"blue\"\r\n                w=\"100%\"\r\n              >\r\n                Create\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n    </FullPage>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\authentication.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\ProtectedRoute\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\Navbar\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FullPage\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Input\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\AppLayout\\index.tsx",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\index.tsx",["255"],"import { AddIcon } from '@chakra-ui/icons';\r\nimport { Box, Flex, Tooltip } from '@chakra-ui/react';\r\nimport React, { FC } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport {\r\n  Channel,\r\n  MeQuery,\r\n  RegularTeamFragment,\r\n} from '../../../../graphql/generated';\r\nimport { TeamItem } from './components';\r\n\r\ninterface Props {\r\n  teams: MeQuery['me']['teams'];\r\n  setSelectedTeam: (selectedTeam: RegularTeamFragment) => void;\r\n  selectedId: string;\r\n  setSelectedChannel: (\r\n    selectedChannel: {\r\n      __typename?: 'Channel' | undefined;\r\n    } & Pick<Channel, 'id' | 'name' | 'public'>\r\n  ) => void;\r\n  selectedChannelId: string | undefined;\r\n  closeDrawer?: () => void;\r\n}\r\n\r\nexport const Teams: FC<Props> = ({\r\n  teams,\r\n  setSelectedTeam,\r\n  selectedId,\r\n  setSelectedChannel,\r\n  selectedChannelId,\r\n  closeDrawer,\r\n}) => {\r\n  return (\r\n    <Flex\r\n      h=\"100vh\"\r\n      overflow=\"auto\"\r\n      css={{\r\n        '&::-webkit-scrollbar': {\r\n          width: 0,\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n          width: 0,\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {},\r\n      }}\r\n      background=\"#253853\"\r\n      color=\"#afc4d2\"\r\n      borderRight=\"1px #3b4d66  solid\"\r\n      align=\"center\"\r\n      flexDir=\"column\"\r\n    >\r\n      {teams &&\r\n        teams.map((team) => (\r\n          <TeamItem\r\n            key={team.id}\r\n            team={team}\r\n            setSelectedTeam={setSelectedTeam}\r\n            selectedId={selectedId}\r\n            setSelectedChannel={setSelectedChannel}\r\n            selectedChannelId={selectedChannelId}\r\n          />\r\n        ))}\r\n      <Box mb={2}>\r\n        <Tooltip label=\"Create a team\" placement=\"right\">\r\n          <Flex\r\n            as={RouterLink}\r\n            to=\"/create-team\"\r\n            align=\"center\"\r\n            justify=\"center\"\r\n            backgroundColor=\"purple.600\"\r\n            borderRadius=\"50%\"\r\n            mt={2}\r\n            width={10}\r\n            height={10}\r\n            color=\"white\"\r\n            _hover={{ backgroundColor: 'purple.500', borderRadius: '25%' }}\r\n            transition=\"all 0.1s ease-in-out\"\r\n            cursor=\"pointer\"\r\n          >\r\n            <AddIcon fontSize=\"xs\" />\r\n          </Flex>\r\n        </Tooltip>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\index.tsx",["256","257"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\index.tsx",["258","259"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ChannelItem\\index.tsx",["260","261","262"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\UserItem\\index.tsx",["263"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\ListItem\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\TeamItem\\index.tsx",["264"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Header\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\Sidebar\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\AddChannelModal\\index.tsx",["265","266"],"import {\r\n  Alert,\r\n  AlertDescription,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Switch,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { Form, Formik } from 'formik';\r\nimport { motion } from 'framer-motion';\r\nimport React, { FC } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Select from 'react-select';\r\nimport {\r\n  Channel,\r\n  MeDocument,\r\n  MemberMultiselect,\r\n  MeQuery,\r\n  useCreateChannelMutation,\r\n  useGetTeamMembersQuery,\r\n} from '../../graphql/generated';\r\nimport { toErrorMap } from '../../utils/toErrorMap';\r\nimport InputField from '../InputField';\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  selectedTeamId: string;\r\n  setSelectedChannel: (\r\n    selectedChannel: {\r\n      __typename?: 'Channel' | undefined;\r\n    } & Pick<Channel, 'id' | 'name' | 'public'>\r\n  ) => void;\r\n  currentUserId: string;\r\n}\r\n\r\nexport const AddChannelModal: FC<Props> = ({\r\n  isOpen,\r\n  onClose,\r\n  selectedTeamId,\r\n  setSelectedChannel,\r\n  currentUserId,\r\n}) => {\r\n  if (!selectedTeamId) return null;\r\n  const [createChannel] = useCreateChannelMutation();\r\n  const { data, loading } = useGetTeamMembersQuery({\r\n    skip: !isOpen,\r\n    variables: { teamId: selectedTeamId },\r\n    fetchPolicy: 'network-only',\r\n  });\r\n  const history = useHistory();\r\n  if (!selectedTeamId || loading || !data) return null;\r\n  return (\r\n    <>\r\n      <Modal\r\n        returnFocusOnClose={false}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n        motionPreset=\"slideInBottom\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Create a team channel</ModalHeader>\r\n          <ModalBody>\r\n            <Formik\r\n              initialValues={{\r\n                name: '',\r\n                teamId: selectedTeamId,\r\n                public: true,\r\n                users: [] as MemberMultiselect[],\r\n              }}\r\n              onSubmit={async (values, { setErrors }) => {\r\n                try {\r\n                  const response = await createChannel({\r\n                    variables: values,\r\n                    // Update cache on channel created\r\n                    update: (store, { data }) => {\r\n                      // If channel could not be created\r\n                      if (!data?.createChannel || !data.createChannel.ok)\r\n                        return null;\r\n\r\n                      // Fetch old data from cache\r\n                      const oldData = store.readQuery<MeQuery>({\r\n                        query: MeDocument,\r\n                      });\r\n\r\n                      // Check if old data exists\r\n                      if (oldData?.me.teams && data.createChannel.channel) {\r\n                        // Write new channel data to cache\r\n                        store.writeQuery<MeQuery>({\r\n                          query: MeDocument,\r\n                          data: {\r\n                            /**\r\n                             * map over team array.\r\n                             * if the selected team is in the array and the channel was created,\r\n                             * add for that team's channels list the newly created channel.\r\n                             */\r\n                            me: {\r\n                              ...oldData.me,\r\n                              teams: oldData.me.teams.map((team, i) => {\r\n                                if (\r\n                                  team.id === selectedTeamId &&\r\n                                  data.createChannel.channel &&\r\n                                  oldData.me.teams &&\r\n                                  oldData.me.teams[i]\r\n                                ) {\r\n                                  return {\r\n                                    ...team,\r\n                                    channels: [\r\n                                      ...(oldData.me.teams[i].channels || []),\r\n                                      data.createChannel.channel,\r\n                                    ],\r\n                                  };\r\n                                }\r\n                                return team;\r\n                              }),\r\n                            },\r\n                          },\r\n                        });\r\n                      }\r\n                    },\r\n                  });\r\n                  if (response.data?.createChannel.errors) {\r\n                    setErrors(toErrorMap(response.data?.createChannel.errors));\r\n                  } else if (response.data?.createChannel.channel) {\r\n                    // Close madal after cache was updated\r\n                    history.push(\r\n                      `/view-team/${selectedTeamId}/${response.data.createChannel.channel?.id}`\r\n                    );\r\n                    setSelectedChannel(response.data.createChannel.channel);\r\n                    onClose();\r\n                  }\r\n                } catch (e) {\r\n                  console.log(e.message);\r\n                }\r\n              }}\r\n            >\r\n              {({\r\n                handleBlur,\r\n                handleChange,\r\n                isSubmitting,\r\n                setFieldValue,\r\n                values,\r\n                errors,\r\n              }) => (\r\n                <Form>\r\n                  <Heading size=\"lg\" fontWeight=\"light\" mb={3}></Heading>\r\n                  <Box my={3}>\r\n                    <InputField\r\n                      autoFocus\r\n                      onBlur={handleBlur}\r\n                      name=\"name\"\r\n                      placeholder=\"Enter channel name...\"\r\n                      label=\"Channel Name\"\r\n                      type=\"text\"\r\n                      autoComplete=\"false\"\r\n                    />\r\n                  </Box>\r\n\r\n                  <FormControl display=\"flex\" alignItems=\"center\">\r\n                    <FormLabel htmlFor=\"public-channel\" mb=\"0\">\r\n                      Make channel private?\r\n                    </FormLabel>\r\n                    <Switch\r\n                      onBlur={handleBlur}\r\n                      id=\"public-channel\"\r\n                      checked={!values.public}\r\n                      onChange={(e) => {\r\n                        setFieldValue('public', !e.target.checked);\r\n                        if (!e.target.checked)\r\n                          setFieldValue('users', [] as MemberMultiselect[]);\r\n                      }}\r\n                    />\r\n                  </FormControl>\r\n                  {!values.public && (\r\n                    <>\r\n                      <FormLabel mt={2}>Add private chat members</FormLabel>\r\n                      <Select\r\n                        styles={{\r\n                          control: (base, state) => ({\r\n                            ...base,\r\n                            borderColor: state.isFocused\r\n                              ? '#3182ce'\r\n                              : '#E2E8F0',\r\n                            boxShadow: state.isFocused\r\n                              ? '0 0 0 1px #3182ce'\r\n                              : undefined,\r\n                            '&:hover': {\r\n                              borderColor: state.isFocused\r\n                                ? '#3182ce'\r\n                                : '#CBD5E0',\r\n                            },\r\n                          }),\r\n                          option: (base, state) => ({\r\n                            ...base,\r\n                            backgroundColor:\r\n                              state.isFocused && state.isSelected\r\n                                ? '#3182ce'\r\n                                : state.isFocused\r\n                                ? '#a7c6e4'\r\n                                : state.isSelected\r\n                                ? '#3182ce'\r\n                                : undefined,\r\n                            color:\r\n                              state.isFocused || state.isSelected\r\n                                ? 'white'\r\n                                : undefined,\r\n                          }),\r\n                          multiValueLabel: (base) => ({\r\n                            ...base,\r\n                            backgroundColor: '#3182ce',\r\n                            color: 'white',\r\n                            borderRadius: 0,\r\n                          }),\r\n                          multiValueRemove: (base) => ({\r\n                            ...base,\r\n                            backgroundColor: '#3182ce',\r\n                            color: 'white',\r\n                            borderRadius: 0,\r\n                            cursor: 'pointer',\r\n                            transition: 'all 0.1s ease',\r\n                            '&:hover': {\r\n                              background: '#c5245a',\r\n                              color: 'white',\r\n                            },\r\n                          }),\r\n                        }}\r\n                        onChange={(newArr) => {\r\n                          setFieldValue('users', newArr);\r\n                        }}\r\n                        defaultValue={[]}\r\n                        isMulti\r\n                        name=\"members\"\r\n                        placeholder=\"Select members...\"\r\n                        value={values.users}\r\n                        options={data?.getTeamMembers\r\n                          .filter((member) => member.id !== currentUserId)\r\n                          .map((member) => ({\r\n                            value: member.id,\r\n                            label: member.username,\r\n                          }))}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                      <Text fontSize=\"sm\" color=\"gray.500\">\r\n                        You will be invited to this channel automatically\r\n                      </Text>\r\n                    </>\r\n                  )}\r\n\r\n                  {/* General Errors Start*/}\r\n                  {errors.teamId && (\r\n                    <Alert status=\"error\">\r\n                      <AlertIcon />\r\n                      <AlertTitle mr={2}>Error!</AlertTitle>\r\n                      <AlertDescription>{errors.teamId}</AlertDescription>\r\n                    </Alert>\r\n                  )}\r\n                  {/* General Errors End*/}\r\n\r\n                  <Button\r\n                    disabled={isSubmitting}\r\n                    isLoading={isSubmitting}\r\n                    mt={3}\r\n                    type=\"submit\"\r\n                    colorScheme=\"blue\"\r\n                    w=\"100%\"\r\n                  >\r\n                    Create Channel\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\InvitePoepleModal\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Channels\\components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\ChatInput\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\accessToken.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Teams\\components\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\containers\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\DirectMessageModal\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\session.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\ChatWindow\\components\\index.ts",[],[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\FileUpload\\index.tsx",["267"],"import { Box, BoxProps } from '@chakra-ui/react';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport {\r\n  RegularChannelFragment,\r\n  useUploadFileMutation,\r\n} from '../../graphql/generated';\r\n\r\ninterface Props extends BoxProps {\r\n  noClick?: boolean;\r\n  teamId: string;\r\n  channelId: string;\r\n  to: RegularChannelFragment;\r\n}\r\n\r\nexport const FileUpload: FC<Props> = ({\r\n  children,\r\n  height,\r\n  noClick = false,\r\n  teamId,\r\n  channelId,\r\n  to,\r\n}) => {\r\n  const [uploadFile] = useUploadFileMutation();\r\n\r\n  const onDrop = useCallback(\r\n    async ([f]) => {\r\n      const file: any = new Blob([f], { type: f.type });\r\n      file.name = f.name;\r\n      if (file) {\r\n        try {\r\n          await uploadFile({ variables: { file, teamId, channelId } });\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n    },\r\n    [to]\r\n  );\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop,\r\n    noClick,\r\n  });\r\n  return (\r\n    <Box height={height} {...getRootProps()} _focus={{ outline: 'none' }}>\r\n      <div>\r\n        <input {...getInputProps()} />\r\n        {children}\r\n      </div>\r\n    </Box>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\Message\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\index.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\CircleIconButton\\index.tsx",["268","269"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\MessageItem\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\context\\SessionContext.tsx",["270"],"/* eslint-disable @typescript-eslint/no-empty-function */\r\nimport { createContext, useContext, useState } from 'react';\r\nimport { initialSession, Session } from './session';\r\nimport React from 'react';\r\n\r\nexport const SessionContext = createContext<\r\n  [Session, (session: Session) => void]\r\n>([initialSession, () => {}]);\r\nexport const useSessionContext = () => useContext(SessionContext);\r\n\r\nexport const SessionContextProvider: React.FC = (props) => {\r\n  const [sessionState, setSessionState] = useState(initialSession);\r\n  const defaultSessionContext: [Session, typeof setSessionState] = [\r\n    sessionState,\r\n    setSessionState,\r\n  ];\r\n\r\n  return (\r\n    <SessionContext.Provider value={defaultSessionContext}>\r\n      {props.children}\r\n    </SessionContext.Provider>\r\n  );\r\n};\r\n","I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\utils\\getBase64Value.ts",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\util\\PublicRoute\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\CircleButton\\index.tsx",[],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\Components\\AutoResizeTextarea\\index.tsx",["271"],"I:\\dev\\fullstack\\slack-graphql-test\\client\\src\\routes\\ViewTeam\\components\\Messages\\components\\Message\\components\\TextMessage\\index.tsx",[],{"ruleId":"272","severity":1,"message":"273","line":2,"column":25,"nodeType":"274","messageId":"275","endLine":2,"endColumn":30},{"ruleId":"272","severity":1,"message":"276","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":16},{"ruleId":"272","severity":1,"message":"277","line":24,"column":3,"nodeType":"274","messageId":"275","endLine":24,"endColumn":10},{"ruleId":"272","severity":1,"message":"278","line":26,"column":3,"nodeType":"274","messageId":"275","endLine":26,"endColumn":28},{"ruleId":"272","severity":1,"message":"279","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":26},{"ruleId":"280","severity":1,"message":"281","line":15,"column":11,"nodeType":"282","messageId":"283","endLine":15,"endColumn":14,"suggestions":"284"},{"ruleId":"285","severity":1,"message":"286","line":708,"column":8,"nodeType":"287","messageId":"288","endLine":708,"endColumn":138},{"ruleId":"285","severity":1,"message":"286","line":742,"column":8,"nodeType":"287","messageId":"288","endLine":742,"endColumn":138},{"ruleId":"285","severity":1,"message":"286","line":787,"column":8,"nodeType":"287","messageId":"288","endLine":787,"endColumn":129},{"ruleId":"285","severity":1,"message":"286","line":819,"column":8,"nodeType":"287","messageId":"288","endLine":819,"endColumn":138},{"ruleId":"285","severity":1,"message":"286","line":852,"column":8,"nodeType":"287","messageId":"288","endLine":852,"endColumn":132},{"ruleId":"285","severity":1,"message":"286","line":892,"column":8,"nodeType":"287","messageId":"288","endLine":892,"endColumn":135},{"ruleId":"285","severity":1,"message":"286","line":932,"column":8,"nodeType":"287","messageId":"288","endLine":932,"endColumn":114},{"ruleId":"285","severity":1,"message":"286","line":961,"column":8,"nodeType":"287","messageId":"288","endLine":961,"endColumn":117},{"ruleId":"285","severity":1,"message":"286","line":998,"column":8,"nodeType":"287","messageId":"288","endLine":998,"endColumn":123},{"ruleId":"285","severity":1,"message":"286","line":1030,"column":8,"nodeType":"287","messageId":"288","endLine":1030,"endColumn":129},{"ruleId":"285","severity":1,"message":"286","line":1059,"column":8,"nodeType":"287","messageId":"288","endLine":1059,"endColumn":111},{"ruleId":"285","severity":1,"message":"286","line":1062,"column":8,"nodeType":"287","messageId":"288","endLine":1062,"endColumn":119},{"ruleId":"285","severity":1,"message":"286","line":1092,"column":8,"nodeType":"287","messageId":"288","endLine":1092,"endColumn":128},{"ruleId":"285","severity":1,"message":"286","line":1095,"column":8,"nodeType":"287","messageId":"288","endLine":1095,"endColumn":137},{"ruleId":"285","severity":1,"message":"286","line":1128,"column":8,"nodeType":"287","messageId":"288","endLine":1128,"endColumn":93},{"ruleId":"285","severity":1,"message":"286","line":1131,"column":8,"nodeType":"287","messageId":"288","endLine":1131,"endColumn":101},{"ruleId":"285","severity":1,"message":"286","line":1165,"column":8,"nodeType":"287","messageId":"288","endLine":1165,"endColumn":110},{"ruleId":"285","severity":1,"message":"286","line":1168,"column":8,"nodeType":"287","messageId":"288","endLine":1168,"endColumn":119},{"ruleId":"285","severity":1,"message":"286","line":1199,"column":8,"nodeType":"287","messageId":"288","endLine":1199,"endColumn":122},{"ruleId":"285","severity":1,"message":"286","line":1202,"column":8,"nodeType":"287","messageId":"288","endLine":1202,"endColumn":131},{"ruleId":"285","severity":1,"message":"286","line":1232,"column":8,"nodeType":"287","messageId":"288","endLine":1232,"endColumn":156},{"ruleId":"285","severity":1,"message":"286","line":1261,"column":8,"nodeType":"287","messageId":"288","endLine":1261,"endColumn":153},{"ruleId":"285","severity":1,"message":"286","line":1290,"column":8,"nodeType":"287","messageId":"288","endLine":1290,"endColumn":165},{"ruleId":"285","severity":1,"message":"286","line":1319,"column":8,"nodeType":"287","messageId":"288","endLine":1319,"endColumn":153},{"ruleId":"272","severity":1,"message":"289","line":15,"column":64,"nodeType":"274","messageId":"275","endLine":15,"endColumn":69},{"ruleId":"272","severity":1,"message":"290","line":31,"column":3,"nodeType":"274","messageId":"275","endLine":31,"endColumn":14},{"ruleId":"272","severity":1,"message":"291","line":10,"column":21,"nodeType":"274","messageId":"275","endLine":10,"endColumn":30},{"ruleId":"272","severity":1,"message":"292","line":15,"column":3,"nodeType":"274","messageId":"275","endLine":15,"endColumn":24},{"ruleId":"272","severity":1,"message":"293","line":7,"column":3,"nodeType":"274","messageId":"275","endLine":7,"endColumn":15},{"ruleId":"272","severity":1,"message":"294","line":52,"column":9,"nodeType":"274","messageId":"275","endLine":52,"endColumn":19},{"ruleId":"272","severity":1,"message":"295","line":1,"column":10,"nodeType":"274","messageId":"275","endLine":1,"endColumn":13},{"ruleId":"272","severity":1,"message":"296","line":6,"column":3,"nodeType":"274","messageId":"275","endLine":6,"endColumn":22},{"ruleId":"272","severity":1,"message":"297","line":28,"column":9,"nodeType":"274","messageId":"275","endLine":28,"endColumn":14},{"ruleId":"272","severity":1,"message":"278","line":6,"column":3,"nodeType":"274","messageId":"275","endLine":6,"endColumn":28},{"ruleId":"272","severity":1,"message":"298","line":26,"column":3,"nodeType":"274","messageId":"275","endLine":26,"endColumn":20},{"ruleId":"272","severity":1,"message":"299","line":21,"column":10,"nodeType":"274","messageId":"275","endLine":21,"endColumn":16},{"ruleId":"272","severity":1,"message":"300","line":152,"column":17,"nodeType":"274","messageId":"275","endLine":152,"endColumn":29},{"ruleId":"280","severity":1,"message":"281","line":28,"column":19,"nodeType":"282","messageId":"283","endLine":28,"endColumn":22,"suggestions":"301"},{"ruleId":"272","severity":1,"message":"302","line":3,"column":3,"nodeType":"274","messageId":"275","endLine":3,"endColumn":14},{"ruleId":"272","severity":1,"message":"303","line":6,"column":3,"nodeType":"274","messageId":"275","endLine":6,"endColumn":9},{"ruleId":"285","severity":1,"message":"286","line":9,"column":34,"nodeType":"304","messageId":"288","endLine":9,"endColumn":39},{"ruleId":"272","severity":1,"message":"291","line":3,"column":17,"nodeType":"274","messageId":"275","endLine":3,"endColumn":26},"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Message' is defined but never used.","'RegularUserStatusFragment' is defined but never used.","'useAllUsersQuery' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["305","306"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","'match' is defined but never used.","'closeDrawer' is defined but never used.","'useEffect' is defined but never used.","'NewUserStatusDocument' is defined but never used.","'DrawerHeader' is defined but never used.","'scrollable' is assigned a value but never used.","'Box' is defined but never used.","'RegularUserFragment' is defined but never used.","'match' is assigned a value but never used.","'selectedChannelId' is defined but never used.","'motion' is defined but never used.","'handleChange' is defined but never used.",["307","308"],"'ButtonProps' is defined but never used.","'Button' is defined but never used.","ArrowFunctionExpression",{"messageId":"309","fix":"310","desc":"311"},{"messageId":"312","fix":"313","desc":"314"},{"messageId":"309","fix":"315","desc":"311"},{"messageId":"312","fix":"316","desc":"314"},"suggestUnknown",{"range":"317","text":"318"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"317","text":"319"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"320","text":"318"},{"range":"320","text":"319"},[641,644],"unknown","never",[630,633]]